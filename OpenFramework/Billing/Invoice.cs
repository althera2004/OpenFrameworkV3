// --------------------------------
// <copyright file="Invoice.cs" company="OpenFramework">
//     Copyright (c) 2013 - OpenFramework. All rights reserved.
// </copyright>
// <author>Juan Castilla Calderón - jcastilla@openframework.cat</author>
// --------------------------------
namespace OpenFrameworkV3.Billing
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Data;
    using System.Data.SqlClient;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Net.Mail;
    using System.Text;
    using System.Web;
    using iTextSharp.text;
    using iTextSharp.text.pdf;
    using OpenFrameworkV3.Core;
    using OpenFrameworkV3.Core.Activity;
    using OpenFrameworkV3.Core.Companies;
    using OpenFrameworkV3.Core.DataAccess;
    using OpenFrameworkV3.Core.ItemManager;
    using OpenFrameworkV3.Core.Security;
    using OpenFrameworkV3.Tools;
    using SepaWriter;

    /// <summary>Implements Invoice class</summary>
    public partial class Invoice
    {
        private List<InvoiceLine> lines;

        public long Id { get; set; }
        public long CompanyId { get; set; }
        public long Number { get; set; }
        public string Subject { get; set; }
        public DateTime Date { get; set; }
        public long ItemDefinitionId { get; set; }
        public long ItemId { get; set; }
        public InvoicePerson Payer { get; set; }
        public InvoicePerson Charger { get; set; }
        public int Status { get; set; }
        public decimal BaseAmount { get; set; }
        public decimal TotalIVA { get; set; }
        public decimal UnbillingAmount { get; set; }
        public decimal Total { get; set; }
        public string Notes { get; set; }
        public string CECO { get; set; }
        public bool SEPA { get; set; }
        public ApplicationUser CreatedBy { get; set; }
        public ApplicationUser ModifiedBy { get; set; }
        public DateTime CreatedOn { get; set; }
        public DateTime ModifiedOn { get; set; }
        public bool Active;

        public string InstanceName { get; set; }

        public DateTime? DateConfirmed { get; set; }
        public DateTime? DateSend { get; set; }
        public DateTime? DatePay { get; set; }
        public DateTime? DateRefuse { get; set; }
        public DateTime? DateVto { get; set; }
        public string RefuseReason { get; set; }
        public int PaymentMethod { get; set; }
        public DateTime? Quote { get; set; }
        public bool Devolucion { get; set; }
        public int Type { get; set; }
        public int BlockReason { get; set; }
        public bool AutoGenerated { get; set; }

        public string PaymentMethodText(Dictionary<string, string> dictionary)
        {
            return dictionary["Billing_PaymentMethod_" + this.PaymentMethod.ToString()];
        }

        public ReadOnlyCollection<InvoiceLine> Lines
        {
            get
            {
                if (this.lines == null)
                {
                    this.lines = new List<InvoiceLine>();
                }

                return new ReadOnlyCollection<InvoiceLine>(this.lines);
            }
        }

        public void AddLine(InvoiceLine line, bool computeTotal)
        {
            if (this.lines == null)
            {
                this.lines = new List<InvoiceLine>();
            }

            if (computeTotal)
            {
                this.BaseAmount += line.BaseImport * line.Quantity;
                this.Total += line.TotalCalculated;
                this.TotalIVA += line.TotalIVACalculated;
            }

            this.lines.Add(line);
        }

        public void GetLines()
        {
            var items = InvoiceLine.ByInvoice(this.Id, this.CompanyId, this.InstanceName);

            foreach (var item in items)
            {
                this.AddLine(item, false);
            }
        }

        public static Invoice Empty
        {
            get
            {
                return new Invoice
                {
                    Id = Constant.DefaultId,
                    CompanyId = Constant.DefaultId,
                    Number = Constant.DefaultId,
                    ItemDefinitionId = Constant.DefaultId,
                    ItemId = Constant.DefaultId,
                    Payer = InvoicePerson.Empty,
                    Charger = InvoicePerson.Empty,
                    Date = DateTime.Now,
                    Status = 0,
                    BaseAmount = 0,
                    TotalIVA = 0,
                    UnbillingAmount = 0,
                    Total = 0,
                    CreatedBy = ApplicationUser.Empty,
                    CreatedOn = DateTime.Now,
                    ModifiedBy = ApplicationUser.Empty,
                    ModifiedOn = DateTime.Now,
                    Active = false,
                    lines = new List<InvoiceLine>(),
                    Subject = string.Empty,
                    PaymentMethod = 0,
                    SEPA = false
                };
            }
        }

        public static string JsonList(ReadOnlyCollection<Invoice> list)
        {
            if (list == null)
            {
                return Tools.Json.EmptyJsonList;
            }

            var res = new StringBuilder("[");
            bool first = true;
            foreach (var item in list)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    res.Append(",");
                }

                res.Append(item.JsonSimple);
            }

            res.Append("]");
            return res.ToString();
        }

        public string JsonSimple
        {
            get
            {
                return string.Format(
                    CultureInfo.InvariantCulture,
                    @"{{""Id"":{0},""CompanyId"":{1},""Number"":{2},""Subject"":""{3}"",""Payer"":{4},""Charger"":{5},""CECO"":""{6}"",""Date"":""{7:dd/MM/yyyy}"",""Status"":{8},""BaseAmount"":{9:#0.00},""TotalIVA"":{10:#0.00},""UnbillingAmount"":{11:#0.00},""Total"":{12:#0.00},""SEPA"":{13},""Type"":{14},""BlockReason"":{15},""Active"":{16}}}",
                    this.Id,
                    this.CompanyId,
                    this.Number,
                    Tools.Json.JsonCompliant(this.Subject),
                    this.Payer.Json,
                    this.Charger.Json,
                    Tools.Json.JsonCompliant(this.CECO),
                    this.Date,
                    this.Status,
                    this.BaseAmount,
                    this.TotalIVA,
                    this.UnbillingAmount,
                    this.Total,
                    ConstantValue.Value(this.SEPA),
                    this.Type,
                    this.BlockReason,
                    ConstantValue.Value(this.Active),
                    Tools.Json.JsonCompliant(this.CECO));
            }
        }

        public string Json
        {
            get
            {
                return string.Format(
                    CultureInfo.InvariantCulture,
                    @"
                    {{
                        ""Id"":{0},
                        ""CompanyId"":{1},
                        ""Number"":{2},
                        ""ItemDefinitionId"":{3},
                        ""ItemId"":{4},
                        ""Payer"":{5},
                        ""Charger"":{6},
                        ""Date"":""{7:dd/MM/yyyy}"",
                        ""Lines"":{8},
                        ""Status"":{9},
                        ""BaseAmount"":{10:#0.00},
                        ""TotalIVA"":{11:#0.00},
                        ""UnbillingAmount"":{12:#0.00},
                        ""Total"":{13:#0.00},
                        ""PaymentMethod"": {14},
                        ""Type"":{21},
                        ""Devolucion"":{22},
                        ""BlockReason"":{23},
                        ""CreatedBy"":{15},""CreatedOn"":""{16:dd/MM/yyyy}"",""ModifiedBy"":{17},""ModifiedOn"":""{18:dd/MM/yyyy}"",""Active"":{19},""Active"":{20}}}",
                    this.Id,
                    this.CompanyId,
                    this.Number,
                    this.ItemDefinitionId,
                    this.ItemId,
                    this.Payer.Json,
                    this.Charger.Json,
                    this.Date,
                    InvoiceLine.JsonList(this.Lines),
                    this.Status,
                    this.BaseAmount,
                    this.TotalIVA,
                    this.UnbillingAmount,
                    this.Total,
                    this.PaymentMethod,
                    this.CreatedBy.JsonKeyValue,
                    this.CreatedOn,
                    this.ModifiedBy.JsonKeyValue,
                    this.ModifiedOn,
                    ConstantValue.Value(this.SEPA),
                    ConstantValue.Value(this.Active),
                    this.Type,
                    ConstantValue.Value(this.Devolucion),
                    this.BlockReason);
            }
        }

        public static ActionResult Insert(DateTime fecha, DateTime fechaVto, int paymentMethod, string subject, long accountId, long addressId, long itemDefinitionId, long itemId, long companyId, DateTime? quote, bool devolucion, long applicationUserId, string instanceName)
        {
            var payer = InvoicePerson.FromDefinition(itemId, itemDefinitionId, instanceName);
            var charger = InvoicePerson.FromCompany(companyId, addressId, accountId, instanceName);
            var invoice = new Invoice
            {
                Active = true,
                BaseAmount = 0,
                Charger = charger,
                Payer = payer,
                CompanyId = companyId,
                Date = fecha,
                ItemDefinitionId = itemDefinitionId,
                ItemId = itemId,
                Status = 0,
                Subject = subject,
                Number = Invoice.LastNumber(companyId, instanceName) + 1,
                DateVto = fechaVto,
                PaymentMethod = paymentMethod,
                Devolucion = devolucion
            };

            if (quote != null)
            {
                invoice.Quote = quote;
            }

            return invoice.Insert(companyId, applicationUserId, instanceName);
        }

        public ActionResult Insert(long companyId, long applicationUserId, string instanceName)
        {
            var res = ActionResult.NoAction;
            /* CREATE PROCEDURE Billing_Invoice_Insert
             * @Id bigint output,
             * @CompanyId bigint,
             * @Number bigint,
             * @Subject nvarchar(100),
             * @ItemDefinitionId bigint,
             * @ItemId bigint,
             * @PayerName nvarchar(100),
             * @PayerCIF nvarchar(15),
             * @PayerIBAN nvarchar(40),
             * @PayerAddress nvarchar(100),
             * @PayerPostalCode nchar(10),
             * @PayerCity nvarchar(50),
             * @PayerProvince nvarchar(20),
             * @PayerCountry nvarchar(20),
             * @PayerPhone nvarchar(15),
             * @PayerEmail nvarchar(50),
             * @ChargerName nvarchar(100),
             * @ChargerCIF nvarchar(15),
             * @ChargerIBAN nvarchar(40),
             * @ChargerSWIFT nchar(20),
             * @ChargerAddress nvarchar(100),
             * @ChargerPostalCode nchar(10),
             * @ChargerCity nvarchar(50),
             * @ChargerProvince nvarchar(20),
             * @ChargerCountry nvarchar(20),
             * @ChargerPhone nchar(15),
             * @ChargerEmail nvarchar(50),
             * @Date datetime,
             * @Total decimal(18,3),
             * @Status int,
             * @PaymentMethod int,
             * @DateVto datetime,
             * @Notes nvarchar(500),
             * @CECO nvarchar(50),
             * @Devolucion bit,
             * @ApplicationUserId bigint */
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_Invoice_Insert"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.OutputLong("@Id"));
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", companyId));
                        cmd.Parameters.Add(DataParameter.Input("@Number", -1));
                        cmd.Parameters.Add(DataParameter.Input("@Subject", this.Subject, 100));
                        cmd.Parameters.Add(DataParameter.Input("@ItemDefinitionId", this.ItemDefinitionId));
                        cmd.Parameters.Add(DataParameter.Input("@ItemId", this.ItemId));
                        cmd.Parameters.Add(DataParameter.Input("@PayerName", this.Payer.Name, 100));
                        cmd.Parameters.Add(DataParameter.Input("@PayerCIF", this.Payer.CIF, 15));
                        cmd.Parameters.Add(DataParameter.Input("@PayerIBAN", this.Payer.IBAN, 40));
                        cmd.Parameters.Add(DataParameter.Input("@PayerAddress", this.Payer.Address, 100));
                        cmd.Parameters.Add(DataParameter.Input("@PayerPostalCode", this.Payer.PostalCode, 10));
                        cmd.Parameters.Add(DataParameter.Input("@PayerCity", this.Payer.City, 50));
                        cmd.Parameters.Add(DataParameter.Input("@PayerProvince", this.Payer.Province, 20));
                        cmd.Parameters.Add(DataParameter.Input("@PayerCountry", this.Payer.Country, 20));
                        cmd.Parameters.Add(DataParameter.Input("@PayerPhone", this.Payer.Phone, 15));
                        cmd.Parameters.Add(DataParameter.Input("@PayerEmail", this.Payer.Email, 50));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerName", this.Charger.Name, 100));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerCIF", this.Charger.CIF, 15));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerIBAN", this.Charger.IBAN, 40));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerSWIFT", this.Charger.SWIFT, 20));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerAddress", this.Charger.Address, 100));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerPostalCode", this.Charger.PostalCode, 10));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerCity", this.Charger.City, 50));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerProvince", this.Charger.Province, 20));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerCountry", this.Charger.Country, 20));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerPhone", this.Charger.Phone, 15));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerEmail", this.Charger.Email, 50));
                        cmd.Parameters.Add(DataParameter.Input("@Date", this.Date));
                        cmd.Parameters.Add(DataParameter.Input("@Total", this.Total));
                        cmd.Parameters.Add(DataParameter.Input("@Status", 0));
                        cmd.Parameters.Add(DataParameter.Input("@DateVto", this.Date));
                        cmd.Parameters.Add(DataParameter.Input("@PaymentMethod", this.PaymentMethod));
                        cmd.Parameters.Add(DataParameter.Input("@Notes", this.Notes, 500));
                        cmd.Parameters.Add(DataParameter.Input("@CECO", this.CECO, 50));
                        cmd.Parameters.Add(DataParameter.Input("@Devolucion", this.Devolucion));
                        cmd.Parameters.Add(DataParameter.Input("@Quote", this.Quote));
                        cmd.Parameters.Add(DataParameter.Input("@Type", this.Type));
                        cmd.Parameters.Add(DataParameter.Input("@BlockReason", this.BlockReason));
                        cmd.Parameters.Add(DataParameter.Input("@AutoGenerated", this.AutoGenerated));
                        cmd.Parameters.Add(DataParameter.Input("@ApplicationUserId", applicationUserId));
                        try
                        {
                            cmd.Connection.Open();
                            cmd.ExecuteNonQuery();
                            this.Id = Convert.ToInt16(cmd.Parameters["@Id"].Value);
                            res.SetSuccess(this.Id);

                            if (this.lines != null)
                            {
                                foreach (var line in this.lines)
                                {
                                    line.InvoiceId = this.Id;
                                    line.CompanyId = companyId;
                                    line.Insert(applicationUserId, instanceName);
                                }
                            }
                        }
                        catch (SqlException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (NullReferenceException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (Exception ex)
                        {
                            res.SetFail(ex);
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return res;
        }

        public ActionResult InsertConfirmed(long companyId, long applicationUserId, bool full, string instanceName)
        {
            var res = ActionResult.NoAction;
            /* CREATE PROCEDURE Billing_Invoice_InsertConfirmed
             * @Id bigint output,
             * @CompanyId bigint,
             * @Subject nvarchar(100),
             * @ItemDefinitionId bigint,
             * @ItemId bigint,
             * @PayerName nvarchar(100),
             * @PayerCIF nvarchar(15),
             * @PayerIBAN nvarchar(40),
             * @PayerAddress nvarchar(100),
             * @PayerPostalCode nchar(10),
             * @PayerCity nvarchar(50),
             * @PayerProvince nvarchar(20),
             * @PayerCountry nvarchar(20),
             * @PayerPhone nvarchar(15),
             * @PayerEmail nvarchar(50),
             * @ChargerName nvarchar(100),
             * @ChargerCIF nvarchar(15),
             * @ChargerIBAN nvarchar(40),
             * @ChargerSWIFT nchar(20),
             * @ChargerAddress nvarchar(100),
             * @ChargerPostalCode nchar(10),
             * @ChargerCity nvarchar(50),
             * @ChargerProvince nvarchar(20),
             * @ChargerCountry nvarchar(20),
             * @ChargerPhone nchar(15),
             * @ChargerEmail nvarchar(50),
             * @Date datetime,
             * @DateConfirmed datetime,
             * @Total decimal(18,3),
             * @PaymentMethod int,
             * @DateVto datetime,
             * @Notes nvarchar(500),
             * @CECO nvarchar(50),
             * @Devolucion bit,
             * @ApplicationUserId bigint */
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_Invoice_InsertConfirmed"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.OutputLong("@Id"));
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", companyId));
                        cmd.Parameters.Add(DataParameter.Input("@Subject", this.Subject, 100));
                        cmd.Parameters.Add(DataParameter.Input("@ItemDefinitionId", this.ItemDefinitionId));
                        cmd.Parameters.Add(DataParameter.Input("@ItemId", this.ItemId));
                        cmd.Parameters.Add(DataParameter.Input("@PayerName", this.Payer.Name, 100));
                        cmd.Parameters.Add(DataParameter.Input("@PayerCIF", this.Payer.CIF, 15));
                        cmd.Parameters.Add(DataParameter.Input("@PayerIBAN", this.Payer.IBAN, 40));
                        cmd.Parameters.Add(DataParameter.Input("@PayerAddress", this.Payer.Address, 100));
                        cmd.Parameters.Add(DataParameter.Input("@PayerPostalCode", this.Payer.PostalCode, 10));
                        cmd.Parameters.Add(DataParameter.Input("@PayerCity", this.Payer.City, 50));
                        cmd.Parameters.Add(DataParameter.Input("@PayerProvince", this.Payer.Province, 20));
                        cmd.Parameters.Add(DataParameter.Input("@PayerCountry", this.Payer.Country, 20));
                        cmd.Parameters.Add(DataParameter.Input("@PayerPhone", this.Payer.Phone, 15));
                        cmd.Parameters.Add(DataParameter.Input("@PayerEmail", this.Payer.Email, 50));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerName", this.Charger.Name, 100));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerCIF", this.Charger.CIF, 15));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerIBAN", this.Charger.IBAN, 40));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerSWIFT", this.Charger.SWIFT, 20));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerAddress", this.Charger.Address, 100));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerPostalCode", this.Charger.PostalCode, 10));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerCity", this.Charger.City, 50));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerProvince", this.Charger.Province, 20));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerCountry", this.Charger.Country, 20));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerPhone", this.Charger.Phone, 15));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerEmail", this.Charger.Email, 50));
                        cmd.Parameters.Add(DataParameter.Input("@Date", this.Date));
                        cmd.Parameters.Add(DataParameter.Input("@Total", this.Total));
                        cmd.Parameters.Add(DataParameter.Input("@DateVto", this.Date));
                        cmd.Parameters.Add(DataParameter.Input("@DateConfirmed", this.DateConfirmed));
                        cmd.Parameters.Add(DataParameter.Input("@PaymentMethod", this.PaymentMethod));
                        cmd.Parameters.Add(DataParameter.Input("@Notes", this.Notes, 500));
                        cmd.Parameters.Add(DataParameter.Input("@CECO", this.CECO, 50));
                        cmd.Parameters.Add(DataParameter.Input("@Devolucion", this.Devolucion));
                        cmd.Parameters.Add(DataParameter.Input("@Quote", this.Quote));
                        cmd.Parameters.Add(DataParameter.Input("@Type", this.Type));
                        cmd.Parameters.Add(DataParameter.Input("@BlockReason", this.BlockReason));
                        cmd.Parameters.Add(DataParameter.Input("@AutoGenerated", this.AutoGenerated));
                        cmd.Parameters.Add(DataParameter.Input("@ApplicationUserId", applicationUserId));
                        try
                        {
                            cmd.Connection.Open();
                            cmd.ExecuteNonQuery();
                            this.Id = Convert.ToInt16(cmd.Parameters["@Id"].Value);
                            res.SetSuccess(this.Id);

                            if (this.lines != null)
                            {
                                foreach (var line in this.lines)
                                {
                                    line.InvoiceId = this.Id;
                                    line.CompanyId = companyId;
                                    if (full)
                                    {
                                        line.InsertFull(applicationUserId, instanceName);
                                    }
                                    else
                                    {
                                        line.Insert(applicationUserId, instanceName);
                                    }
                                }
                            }
                        }
                        catch (SqlException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (NullReferenceException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (Exception ex)
                        {
                            res.SetFail(ex);
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return res;
        }

        public ActionResult InsertConfirmed(long companyId, long applicationUserId, string instanceName)
        {
            return InsertConfirmed(companyId, applicationUserId, false, instanceName);
        }

        public ActionResult InsertPayed(long companyId, long applicationUserId, string instanceName)
        {
            var res = ActionResult.NoAction;
            /* CREATE PROCEDURE Billing_Invoice_InsertPayed
             * @Id bigint output,
             * @CompanyId bigint,
             * @Subject nvarchar(100),
             * @ItemDefinitionId bigint,
             * @ItemId bigint,
             * @PayerName nvarchar(100),
             * @PayerCIF nvarchar(15),
             * @PayerIBAN nvarchar(40),
             * @PayerAddress nvarchar(100),
             * @PayerPostalCode nchar(10),
             * @PayerCity nvarchar(50),
             * @PayerProvince nvarchar(20),
             * @PayerCountry nvarchar(20),
             * @PayerPhone nvarchar(15),
             * @PayerEmail nvarchar(50),
             * @ChargerName nvarchar(100),
             * @ChargerCIF nvarchar(15),
             * @ChargerIBAN nvarchar(40),
             * @ChargerSWIFT nchar(20),
             * @ChargerAddress nvarchar(100),
             * @ChargerPostalCode nchar(10),
             * @ChargerCity nvarchar(50),
             * @ChargerProvince nvarchar(20),
             * @ChargerCountry nvarchar(20),
             * @ChargerPhone nchar(15),
             * @ChargerEmail nvarchar(50),
             * @Date datetime,
             * @DatePay datetime,
             * @Total decimal(18,3),
             * @PaymentMethod int,
             * @DateVto datetime,
             * @Notes nvarchar(500),
             * @CECO nvarchar(50),
             * @Devolucion bit,
             * @ApplicationUserId bigint */
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_Invoice_InsertPayed"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.OutputLong("@Id"));
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", companyId));
                        cmd.Parameters.Add(DataParameter.Input("@Subject", this.Subject, 100));
                        cmd.Parameters.Add(DataParameter.Input("@ItemDefinitionId", this.ItemDefinitionId));
                        cmd.Parameters.Add(DataParameter.Input("@ItemId", this.ItemId));
                        cmd.Parameters.Add(DataParameter.Input("@PayerName", this.Payer.Name, 100));
                        cmd.Parameters.Add(DataParameter.Input("@PayerCIF", this.Payer.CIF, 15));
                        cmd.Parameters.Add(DataParameter.Input("@PayerIBAN", this.Payer.IBAN, 40));
                        cmd.Parameters.Add(DataParameter.Input("@PayerAddress", this.Payer.Address, 100));
                        cmd.Parameters.Add(DataParameter.Input("@PayerPostalCode", this.Payer.PostalCode, 10));
                        cmd.Parameters.Add(DataParameter.Input("@PayerCity", this.Payer.City, 50));
                        cmd.Parameters.Add(DataParameter.Input("@PayerProvince", this.Payer.Province, 20));
                        cmd.Parameters.Add(DataParameter.Input("@PayerCountry", this.Payer.Country, 20));
                        cmd.Parameters.Add(DataParameter.Input("@PayerPhone", this.Payer.Phone, 15));
                        cmd.Parameters.Add(DataParameter.Input("@PayerEmail", this.Payer.Email, 50));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerName", this.Charger.Name, 100));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerCIF", this.Charger.CIF, 15));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerIBAN", this.Charger.IBAN, 40));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerSWIFT", this.Charger.SWIFT, 20));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerAddress", this.Charger.Address, 100));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerPostalCode", this.Charger.PostalCode, 10));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerCity", this.Charger.City, 50));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerProvince", this.Charger.Province, 20));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerCountry", this.Charger.Country, 20));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerPhone", this.Charger.Phone, 15));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerEmail", this.Charger.Email, 50));
                        cmd.Parameters.Add(DataParameter.Input("@Date", this.Date));
                        cmd.Parameters.Add(DataParameter.Input("@Total", this.Total));
                        cmd.Parameters.Add(DataParameter.Input("@DateVto", this.Date));
                        cmd.Parameters.Add(DataParameter.Input("@DatePay", this.DatePay));
                        cmd.Parameters.Add(DataParameter.Input("@PaymentMethod", this.PaymentMethod));
                        cmd.Parameters.Add(DataParameter.Input("@Notes", this.Notes, 500));
                        cmd.Parameters.Add(DataParameter.Input("@CECO", this.CECO, 50));
                        cmd.Parameters.Add(DataParameter.Input("@Devolucion", this.Devolucion));
                        cmd.Parameters.Add(DataParameter.Input("@Quote", this.Quote));
                        cmd.Parameters.Add(DataParameter.Input("@Type", this.Type));
                        cmd.Parameters.Add(DataParameter.Input("@BlockReason", this.BlockReason));
                        cmd.Parameters.Add(DataParameter.Input("@AutoGenerated", this.AutoGenerated));
                        cmd.Parameters.Add(DataParameter.Input("@ApplicationUserId", applicationUserId));
                        try
                        {
                            cmd.Connection.Open();
                            cmd.ExecuteNonQuery();
                            this.Id = Convert.ToInt16(cmd.Parameters["@Id"].Value);
                            res.SetSuccess(this.Id);

                            if (this.lines != null)
                            {
                                foreach (var line in this.lines)
                                {
                                    line.InvoiceId = this.Id;
                                    line.CompanyId = companyId;
                                    line.Insert(applicationUserId, instanceName);
                                }
                            }
                        }
                        catch (SqlException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (NullReferenceException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (Exception ex)
                        {
                            res.SetFail(ex);
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return res;
        }

        public ActionResult UpdateAmounts(long applicationUserId, bool saveDatabase, string instanceName)
        {
            var res = ActionResult.NoAction;

            if (this.lines == null || this.lines.Count == 0)
            {
                res.SetSuccess();
            }
            else
            {
                this.BaseAmount = 0;
                this.UnbillingAmount = 0;
                this.Total = 0;
                this.TotalIVA = 0;

                foreach (var line in this.lines)
                {
                    this.BaseAmount += line.Unbilling ? 0 : line.BaseImport;
                    this.TotalIVA += line.Unbilling ? 0 : Math.Round(line.BaseImport * line.IVA / 100, 2);
                    this.UnbillingAmount += line.Unbilling ? line.BaseImport : 0;
                    this.Total += line.Unbilling ? 0 : line.Total;
                }

                if (saveDatabase)
                {
                    res = UpdateAmounts(applicationUserId, instanceName);
                }
            }

            return res;
        }

        public static ActionResult UpdateAmounts(long invoiceId, long companyId, long applicationUserId, string instanceName)
        {
            var invoice = ById(invoiceId, companyId, instanceName);
            return invoice.UpdateAmounts(applicationUserId, true, instanceName);
        }

        public ActionResult UpdateAmounts(long applicationUserId, string instanceName)
        {
            var res = ActionResult.NoAction;
            /* CREATE PROCEDURE [dbo].[Billing_Invoice_UpdateAmounts]
                     *   @Id bigint,
                     *   @CompanyId bigint,
                     *   @BaseAmount decimal(18,3),
                     *   @TotalIva decimal(18,3),
                     *   @Total decimal(18,3),
                     *   @UnbillingAmount decimal(18,3),
                     *   @ApplicationUserId bigint */
            string cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_Invoice_UpdateAmounts"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.Input("@Id", this.Id));
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", this.CompanyId));
                        cmd.Parameters.Add(DataParameter.Input("@BaseAmount", this.BaseAmount));
                        cmd.Parameters.Add(DataParameter.Input("@TotalIVA", this.TotalIVA));
                        cmd.Parameters.Add(DataParameter.Input("@Total", this.Total));
                        cmd.Parameters.Add(DataParameter.Input("@UnbillingAmount", this.UnbillingAmount));
                        cmd.Parameters.Add(DataParameter.Input("@ApplicationUserId", applicationUserId));
                        try
                        {
                            cmd.Connection.Open();
                            cmd.ExecuteNonQuery();
                            res.SetSuccess();
                        }
                        catch (Exception ex)
                        {
                            res.SetFail(ex);
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return res;
        }

        public ActionResult Update(long applicationUserId, string instanceName)
        {
            var res = ActionResult.NoAction;
            /* CREATE PROCEDURE Billing_Invoice_Update
             *   @Id bigint,
             *   @CompanyId bigint,
             *   @PayerName nvarchar(100),
             *   @PayerCIF nvarchar(15),
             *   @PayerIBAN nvarchar(40),
             *   @PayerAddress nvarchar(100),
             *   @PayerPostalCode nchar(10),
             *   @PayerCity nvarchar(50),
             *   @PayerProvince nvarchar(20),
             *   @PayerCountry nvarchar(20),
             *   @PayerPhone nvarchar(15),
             *   @PayerEmail nvarchar(50),
             *   @ChargerName nvarchar(100),
             *   @ChargerCIF nvarchar(15),
             *   @ChargerIBAN nvarchar(40),
             *   @ChargerAddress nvarchar(100),
             *   @ChargerPostalCode nchar(10),
             *   @ChargerCity nvarchar(50),
             *   @ChargerProvince nvarchar(20),
             *   @ChargerCountry nvarchar(20),
             *   @ChargerPhone nchar(15),
             *   @ChargerEmail nvarchar(50),
             *   @Date datetime,
             *   @DateVto datetime,
             *   @Status int,
             *   @ApplicationUserId bigint */
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_Invoice_Update"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.Input("@Id", this.Id));
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", this.CompanyId));
                        cmd.Parameters.Add(DataParameter.Input("@PayerName", this.Payer.Name, 100));
                        cmd.Parameters.Add(DataParameter.Input("@PayerCIF", this.Payer.CIF, 15));
                        cmd.Parameters.Add(DataParameter.Input("@PayerIBAN", this.Payer.IBAN, 40));
                        cmd.Parameters.Add(DataParameter.Input("@PayerAddress", this.Payer.Address, 100));
                        cmd.Parameters.Add(DataParameter.Input("@PayerPostalCode", this.Payer.PostalCode, 10));
                        cmd.Parameters.Add(DataParameter.Input("@PayerCity", this.Payer.City, 50));
                        cmd.Parameters.Add(DataParameter.Input("@PayerProvince", this.Payer.Province, 20));
                        cmd.Parameters.Add(DataParameter.Input("@PayerCountry", this.Payer.Country, 20));
                        cmd.Parameters.Add(DataParameter.Input("@PayerPhone", this.Payer.Phone, 15));
                        cmd.Parameters.Add(DataParameter.Input("@PayerEmail", this.Payer.Email, 50));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerName", this.Charger.Name, 100));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerCIF", this.Charger.CIF, 15));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerIBAN", this.Charger.IBAN, 40));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerAddress", this.Charger.Address, 100));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerPostalCode", this.Charger.PostalCode, 10));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerCity", this.Charger.City, 50));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerProvince", this.Charger.Province, 20));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerCountry", this.Charger.Country, 20));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerPhone", this.Charger.Phone, 15));
                        cmd.Parameters.Add(DataParameter.Input("@ChargerEmail", this.Payer.Email, 50));
                        cmd.Parameters.Add(DataParameter.Input("@Date", this.Date));
                        cmd.Parameters.Add(DataParameter.Input("@DateVto", this.DateVto));
                        cmd.Parameters.Add(DataParameter.Input("@Status", 0));
                        cmd.Parameters.Add(DataParameter.Input("@ApplicationUserId", applicationUserId));
                        try
                        {
                            cmd.Connection.Open();
                            cmd.ExecuteNonQuery();
                            res.SetSuccess(this.Id);
                        }
                        catch (SqlException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (NullReferenceException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (Exception ex)
                        {
                            res.SetFail(ex);
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return res;
        }

        public static Invoice ById(long id, long companyId, string instanceName)
        {
            var res = Invoice.Empty;
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_Invoice_ById"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.Input("@Id", id));
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", companyId));
                        try
                        {
                            cmd.Connection.Open();
                            using (var rdr = cmd.ExecuteReader())
                            {
                                if (rdr.HasRows)
                                {
                                    rdr.Read();
                                    res = new Invoice
                                    {
                                        Id = rdr.GetInt64(ColumnsInvoiceGet.Id),
                                        CompanyId = rdr.GetInt64(ColumnsInvoiceGet.CompanyId),
                                        Number = rdr.GetInt64(ColumnsInvoiceGet.Number),
                                        Subject = rdr.GetString(ColumnsInvoiceGet.Subject),
                                        Date = rdr.GetDateTime(ColumnsInvoiceGet.Date),
                                        PaymentMethod = rdr.GetInt32(ColumnsInvoiceGet.PaymentMethod),
                                        BaseAmount = rdr.GetDecimal(ColumnsInvoiceGet.BaseAmount),
                                        TotalIVA = rdr.GetDecimal(ColumnsInvoiceGet.TotalIVA),
                                        UnbillingAmount = rdr.GetDecimal(ColumnsInvoiceGet.UnbillingAmount),
                                        Total = rdr.GetDecimal(ColumnsInvoiceGet.Total),
                                        Status = rdr.GetInt32(ColumnsInvoiceGet.Status),
                                        CECO = rdr.GetString(ColumnsInvoiceGet.CECO),
                                        Notes = rdr.GetString(ColumnsInvoiceGet.Notes),
                                        SEPA = rdr.GetBoolean(ColumnsInvoiceGet.SEPA),
                                        Type = rdr.GetInt32(ColumnsInvoiceGet.Type),
                                        BlockReason = rdr.GetInt32(ColumnsInvoiceGet.BlockReason),
                                        Devolucion = rdr.GetBoolean(ColumnsInvoiceGet.Devolucion),
                                        Payer = new InvoicePerson
                                        {
                                            Name = rdr.GetString(ColumnsInvoiceGet.PayerName).Trim(),
                                            CIF = rdr.GetString(ColumnsInvoiceGet.PayerCIF).Trim(),
                                            IBAN = rdr.GetString(ColumnsInvoiceGet.PayerIBAN).Trim(),
                                            Address = rdr.GetString(ColumnsInvoiceGet.PayerAddress).Trim(),
                                            PostalCode = rdr.GetString(ColumnsInvoiceGet.PayerPostalCode).Trim(),
                                            City = rdr.GetString(ColumnsInvoiceGet.PayerCity).Trim(),
                                            Province = rdr.GetString(ColumnsInvoiceGet.PayerProvince).Trim(),
                                            Country = rdr.GetString(ColumnsInvoiceGet.PayerCountry).Trim(),
                                            Phone = rdr.GetString(ColumnsInvoiceGet.PayerPhone).Trim(),
                                            Email = rdr.GetString(ColumnsInvoiceGet.PayerEmail).Trim()
                                        },
                                        Charger = new InvoicePerson
                                        {
                                            Name = rdr.GetString(ColumnsInvoiceGet.ChargerName).Trim(),
                                            CIF = rdr.GetString(ColumnsInvoiceGet.ChargerCIF).Trim(),
                                            IBAN = rdr.GetString(ColumnsInvoiceGet.ChargerIBAN).Trim(),
                                            SWIFT = rdr.GetString(ColumnsInvoiceGet.ChargerSwift).Trim(),
                                            Address = rdr.GetString(ColumnsInvoiceGet.ChargerAddress).Trim(),
                                            PostalCode = rdr.GetString(ColumnsInvoiceGet.ChargerPostalCode).Trim(),
                                            City = rdr.GetString(ColumnsInvoiceGet.ChargerCity).Trim(),
                                            Province = rdr.GetString(ColumnsInvoiceGet.ChargerProvince).Trim(),
                                            Country = rdr.GetString(ColumnsInvoiceGet.ChargerCountry).Trim(),
                                            Phone = rdr.GetString(ColumnsInvoiceGet.ChargerPhone).Trim(),
                                            Email = rdr.GetString(ColumnsInvoiceGet.ChargerEmail).Trim()
                                        },
                                        ItemDefinitionId = rdr.GetInt64(ColumnsInvoiceGet.ItemDefinitionId),
                                        ItemId = rdr.GetInt64(ColumnsInvoiceGet.ItemId),
                                        CreatedBy = new ApplicationUser
                                        {
                                            Id = rdr.GetInt64(ColumnsInvoiceGet.CreatedBy),
                                            Profile = new Profile
                                            {
                                                ApplicationUserId = rdr.GetInt64(ColumnsInvoiceGet.CreatedBy),
                                                Name = rdr.GetString(ColumnsInvoiceGet.CreatedByName),
                                                LastName = rdr.GetString(ColumnsInvoiceGet.CreatedByLastName),
                                                LastName2 = rdr.GetString(ColumnsInvoiceGet.CreatedByLastName2)
                                            }
                                        },
                                        CreatedOn = rdr.GetDateTime(ColumnsInvoiceGet.CreatedOn),
                                        ModifiedBy = new ApplicationUser
                                        {
                                            Id = rdr.GetInt64(ColumnsInvoiceGet.ModifiedBy),
                                            Profile = new Profile
                                            {
                                                ApplicationUserId = rdr.GetInt64(ColumnsInvoiceGet.ModifiedBy),
                                                Name = rdr.GetString(ColumnsInvoiceGet.ModifiedByName),
                                                LastName = rdr.GetString(ColumnsInvoiceGet.ModifiedByLastName),
                                                LastName2 = rdr.GetString(ColumnsInvoiceGet.ModifiedByLastName2)
                                            }
                                        },
                                        ModifiedOn = rdr.GetDateTime(ColumnsInvoiceGet.ModifiedOn),
                                        Active = rdr.GetBoolean(ColumnsInvoiceGet.Active)
                                    };

                                    if (!rdr.IsDBNull(ColumnsInvoiceGet.DateConfirmed))
                                    {
                                        res.DateConfirmed = rdr.GetDateTime(ColumnsInvoiceGet.DateConfirmed);
                                    }

                                    if (!rdr.IsDBNull(ColumnsInvoiceGet.DateSend))
                                    {
                                        res.DateSend = rdr.GetDateTime(ColumnsInvoiceGet.DateSend);
                                    }

                                    if (!rdr.IsDBNull(ColumnsInvoiceGet.DatePay))
                                    {
                                        res.DatePay = rdr.GetDateTime(ColumnsInvoiceGet.DatePay);
                                    }

                                    if (!rdr.IsDBNull(ColumnsInvoiceGet.DateVto))
                                    {
                                        res.DateVto = rdr.GetDateTime(ColumnsInvoiceGet.DateVto);
                                    }

                                    if (!rdr.IsDBNull(ColumnsInvoiceGet.DateRefuse))
                                    {
                                        res.DateRefuse = rdr.GetDateTime(ColumnsInvoiceGet.DateRefuse);
                                        res.RefuseReason = rdr.GetString(ColumnsInvoiceGet.RefuseReason);
                                    }

                                    res.GetLines();
                                }
                            }
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return res;
        }

        public static ReadOnlyCollection<Invoice> ByItemId(long itemDefinitionId, long itemId, long companyId, string instanceName)
        {
            var res = new List<Invoice>();
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_Invoice_ByItemId"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.Input("@ItemDefinitionId", itemDefinitionId));
                        cmd.Parameters.Add(DataParameter.Input("@ItemId", itemId));
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", companyId));
                        try
                        {
                            cmd.Connection.Open();
                            using (var rdr = cmd.ExecuteReader())
                            {
                                while (rdr.Read())
                                {
                                    var newInvoice = new Invoice
                                    {
                                        Id = rdr.GetInt64(ColumnsInvoiceGet.Id),
                                        CompanyId = rdr.GetInt64(ColumnsInvoiceGet.CompanyId),
                                        Number = rdr.GetInt64(ColumnsInvoiceGet.Number),
                                        Date = rdr.GetDateTime(ColumnsInvoiceGet.Date),
                                        Subject = rdr.GetString(ColumnsInvoiceGet.Subject),
                                        BaseAmount = rdr.GetDecimal(ColumnsInvoiceGet.BaseAmount),
                                        TotalIVA = rdr.GetDecimal(ColumnsInvoiceGet.TotalIVA),
                                        UnbillingAmount = rdr.GetDecimal(ColumnsInvoiceGet.UnbillingAmount),
                                        Total = rdr.GetDecimal(ColumnsInvoiceGet.Total),
                                        SEPA = rdr.GetBoolean(ColumnsInvoiceGet.SEPA),
                                        Payer = new InvoicePerson
                                        {
                                            Name = rdr.GetString(ColumnsInvoiceGet.PayerName),
                                            CIF = rdr.GetString(ColumnsInvoiceGet.PayerCIF),
                                            IBAN = rdr.GetString(ColumnsInvoiceGet.PayerIBAN),
                                            Address = rdr.GetString(ColumnsInvoiceGet.PayerAddress),
                                            PostalCode = rdr.GetString(ColumnsInvoiceGet.PayerPostalCode),
                                            City = rdr.GetString(ColumnsInvoiceGet.PayerCity),
                                            Province = rdr.GetString(ColumnsInvoiceGet.PayerProvince),
                                            Country = rdr.GetString(ColumnsInvoiceGet.PayerCountry),
                                            Phone = rdr.GetString(ColumnsInvoiceGet.PayerPhone),
                                            Email = rdr.GetString(ColumnsInvoiceGet.PayerEmail)
                                        },
                                        Charger = new InvoicePerson
                                        {
                                            Name = rdr.GetString(ColumnsInvoiceGet.ChargerName),
                                            CIF = rdr.GetString(ColumnsInvoiceGet.ChargerCIF),
                                            IBAN = rdr.GetString(ColumnsInvoiceGet.ChargerIBAN),
                                            Address = rdr.GetString(ColumnsInvoiceGet.ChargerAddress),
                                            PostalCode = rdr.GetString(ColumnsInvoiceGet.ChargerPostalCode),
                                            City = rdr.GetString(ColumnsInvoiceGet.ChargerCity),
                                            Province = rdr.GetString(ColumnsInvoiceGet.ChargerProvince),
                                            Country = rdr.GetString(ColumnsInvoiceGet.ChargerCountry),
                                            Phone = rdr.GetString(ColumnsInvoiceGet.ChargerPhone),
                                            Email = rdr.GetString(ColumnsInvoiceGet.ChargerEmail)
                                        },
                                        ItemDefinitionId = rdr.GetInt64(ColumnsInvoiceGet.ItemDefinitionId),
                                        ItemId = rdr.GetInt64(ColumnsInvoiceGet.ItemId),
                                        CreatedBy = new ApplicationUser
                                        {
                                            Id = rdr.GetInt64(ColumnsInvoiceGet.CreatedBy),
                                            Profile = new Profile
                                            {
                                                ApplicationUserId = rdr.GetInt64(ColumnsInvoiceGet.CreatedBy),
                                                Name = rdr.GetString(ColumnsInvoiceGet.CreatedByName),
                                                LastName = rdr.GetString(ColumnsInvoiceGet.CreatedByLastName),
                                                LastName2 = rdr.GetString(ColumnsInvoiceGet.CreatedByLastName2)
                                            }
                                        },
                                        CreatedOn = rdr.GetDateTime(ColumnsInvoiceGet.CreatedOn),
                                        ModifiedBy = new ApplicationUser
                                        {
                                            Id = rdr.GetInt64(ColumnsInvoiceGet.ModifiedBy),
                                            Profile = new Profile
                                            {
                                                ApplicationUserId = rdr.GetInt64(ColumnsInvoiceGet.ModifiedBy),
                                                Name = rdr.GetString(ColumnsInvoiceGet.ModifiedByName),
                                                LastName = rdr.GetString(ColumnsInvoiceGet.ModifiedByLastName),
                                                LastName2 = rdr.GetString(ColumnsInvoiceGet.ModifiedByLastName2)
                                            }
                                        },
                                        ModifiedOn = rdr.GetDateTime(ColumnsInvoiceGet.ModifiedOn),
                                        Status = rdr.GetInt32(ColumnsInvoiceGet.Status),
                                        Active = rdr.GetBoolean(ColumnsInvoiceGet.Active)
                                    };

                                    newInvoice.GetLines();
                                    res.Add(newInvoice);
                                }
                            }
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return new ReadOnlyCollection<Invoice>(res);
        }

        public static ReadOnlyCollection<Invoice> Filter(string from, string to, string status, long companyId, string instanceName)
        {
            var res = new List<Invoice>();
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(instanceName)) {
                using (var cmd = new SqlCommand("Billing_Invoice_Filter"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;

                        var dateFrom = Tools.DateFormat.FromStringddMMyyyy(from);
                        var dateTo = Tools.DateFormat.FromStringddMMyyyy(to);
                        var status0 = status.IndexOf('0') != -1;
                        var status1 = status.IndexOf('1') != -1;
                        var status2 = status.IndexOf('2') != -1;
                        var status3 = status.IndexOf('3') != -1;
                        var status4 = status.IndexOf('4') != -1;
                        var status5 = status.IndexOf('5') != -1;
                        var devolucion = status.IndexOf('6') != -1;
                        cmd.Parameters.Add(DataParameter.Input("@DateFrom", dateFrom));
                        cmd.Parameters.Add(DataParameter.Input("@DateTo", dateTo));
                        cmd.Parameters.Add(DataParameter.Input("@Status0", status0));
                        cmd.Parameters.Add(DataParameter.Input("@Status1", status1));
                        cmd.Parameters.Add(DataParameter.Input("@Status2", status2));
                        cmd.Parameters.Add(DataParameter.Input("@Status3", status3));
                        cmd.Parameters.Add(DataParameter.Input("@Status4", status4));
                        cmd.Parameters.Add(DataParameter.Input("@Status5", status5));
                        cmd.Parameters.Add(DataParameter.Input("@Devolucion", devolucion));
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", companyId));
                        try
                        {
                            cmd.Connection.Open();
                            using (var rdr = cmd.ExecuteReader())
                            {
                                while (rdr.Read())
                                {
                                    var newInvoice = new Invoice
                                    {
                                        Id = rdr.GetInt64(ColumnsInvoiceGet.Id),
                                        CompanyId = rdr.GetInt64(ColumnsInvoiceGet.CompanyId),
                                        Number = rdr.GetInt64(ColumnsInvoiceGet.Number),
                                        Subject = rdr.GetString(ColumnsInvoiceGet.Subject),
                                        Date = rdr.GetDateTime(ColumnsInvoiceGet.Date),
                                        BaseAmount = rdr.GetDecimal(ColumnsInvoiceGet.BaseAmount),
                                        TotalIVA = rdr.GetDecimal(ColumnsInvoiceGet.TotalIVA),
                                        UnbillingAmount = rdr.GetDecimal(ColumnsInvoiceGet.UnbillingAmount),
                                        Total = rdr.GetDecimal(ColumnsInvoiceGet.Total),
                                        SEPA = rdr.GetBoolean(ColumnsInvoiceGet.SEPA),
                                        Type = rdr.GetInt32(ColumnsInvoiceGet.Type),
                                        BlockReason = rdr.GetInt32(ColumnsInvoiceGet.BlockReason),
                                        Payer = new InvoicePerson
                                        {
                                            Name = rdr.GetString(ColumnsInvoiceGet.PayerName),
                                            CIF = rdr.GetString(ColumnsInvoiceGet.PayerCIF),
                                            IBAN = rdr.GetString(ColumnsInvoiceGet.PayerIBAN),
                                            Address = rdr.GetString(ColumnsInvoiceGet.PayerAddress),
                                            PostalCode = rdr.GetString(ColumnsInvoiceGet.PayerPostalCode).Trim(),
                                            City = rdr.GetString(ColumnsInvoiceGet.PayerCity),
                                            Province = rdr.GetString(ColumnsInvoiceGet.PayerProvince),
                                            Country = rdr.GetString(ColumnsInvoiceGet.PayerCountry),
                                            Phone = rdr.GetString(ColumnsInvoiceGet.PayerPhone).Trim(),
                                            Email = rdr.GetString(ColumnsInvoiceGet.PayerEmail)
                                        },
                                        Charger = new InvoicePerson
                                        {
                                            Name = rdr.GetString(ColumnsInvoiceGet.ChargerName),
                                            CIF = rdr.GetString(ColumnsInvoiceGet.ChargerCIF),
                                            IBAN = rdr.GetString(ColumnsInvoiceGet.ChargerIBAN),
                                            Address = rdr.GetString(ColumnsInvoiceGet.ChargerAddress),
                                            PostalCode = rdr.GetString(ColumnsInvoiceGet.ChargerPostalCode).Trim(),
                                            City = rdr.GetString(ColumnsInvoiceGet.ChargerCity),
                                            Province = rdr.GetString(ColumnsInvoiceGet.ChargerProvince),
                                            Country = rdr.GetString(ColumnsInvoiceGet.ChargerCountry),
                                            Phone = rdr.GetString(ColumnsInvoiceGet.ChargerPhone).Trim(),
                                            Email = rdr.GetString(ColumnsInvoiceGet.ChargerEmail)
                                        },
                                        ItemDefinitionId = rdr.GetInt64(ColumnsInvoiceGet.ItemDefinitionId),
                                        ItemId = rdr.GetInt64(ColumnsInvoiceGet.ItemId),
                                        CreatedBy = new ApplicationUser
                                        {
                                            Id = rdr.GetInt64(ColumnsInvoiceGet.CreatedBy),
                                            Profile = new Profile
                                            {
                                                ApplicationUserId = rdr.GetInt64(ColumnsInvoiceGet.CreatedBy),
                                                Name = rdr.GetString(ColumnsInvoiceGet.CreatedByName),
                                                LastName = rdr.GetString(ColumnsInvoiceGet.CreatedByLastName),
                                                LastName2 = rdr.GetString(ColumnsInvoiceGet.CreatedByLastName2)
                                            }
                                        },
                                        CreatedOn = rdr.GetDateTime(ColumnsInvoiceGet.CreatedOn),
                                        ModifiedBy = new ApplicationUser
                                        {
                                            Id = rdr.GetInt64(ColumnsInvoiceGet.ModifiedBy),
                                            Profile = new Profile
                                            {
                                                ApplicationUserId = rdr.GetInt64(ColumnsInvoiceGet.ModifiedBy),
                                                Name = rdr.GetString(ColumnsInvoiceGet.ModifiedByName),
                                                LastName = rdr.GetString(ColumnsInvoiceGet.ModifiedByLastName),
                                                LastName2 = rdr.GetString(ColumnsInvoiceGet.ModifiedByLastName2)
                                            }
                                        },
                                        ModifiedOn = rdr.GetDateTime(ColumnsInvoiceGet.ModifiedOn),
                                        Status = rdr.GetInt32(ColumnsInvoiceGet.Status),
                                        Devolucion = rdr.GetBoolean(ColumnsInvoiceGet.Devolucion),
                                        Active = rdr.GetBoolean(ColumnsInvoiceGet.Active),
                                        CECO = rdr.GetString(ColumnsInvoiceGet.CECO)
                                    };

                                    res.Add(newInvoice);
                                }
                            }
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return new ReadOnlyCollection<Invoice>(res);
        }

        public static ReadOnlyCollection<Invoice> ByCompany(long companyId, string instanceName)
        {
            var res = new List<Invoice>();
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_Invoice_ByCompanyId"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", companyId));
                        try
                        {
                            cmd.Connection.Open();
                            using (var rdr = cmd.ExecuteReader())
                            {
                                while (rdr.Read())
                                {
                                    var newInvoice = new Invoice
                                    {
                                        Id = rdr.GetInt64(ColumnsInvoiceGet.Id),
                                        CompanyId = rdr.GetInt64(ColumnsInvoiceGet.CompanyId),
                                        Number = rdr.GetInt64(ColumnsInvoiceGet.Number),
                                        Subject = rdr.GetString(ColumnsInvoiceGet.Subject),
                                        Date = rdr.GetDateTime(ColumnsInvoiceGet.Date),
                                        BaseAmount = rdr.GetDecimal(ColumnsInvoiceGet.BaseAmount),
                                        TotalIVA = rdr.GetDecimal(ColumnsInvoiceGet.TotalIVA),
                                        UnbillingAmount = rdr.GetDecimal(ColumnsInvoiceGet.UnbillingAmount),
                                        Total = rdr.GetDecimal(ColumnsInvoiceGet.Total),
                                        SEPA = rdr.GetBoolean(ColumnsInvoiceGet.SEPA),
                                        Payer = new InvoicePerson
                                        {
                                            Name = rdr.GetString(ColumnsInvoiceGet.PayerName),
                                            CIF = rdr.GetString(ColumnsInvoiceGet.PayerCIF),
                                            IBAN = rdr.GetString(ColumnsInvoiceGet.PayerIBAN),
                                            Address = rdr.GetString(ColumnsInvoiceGet.PayerAddress),
                                            PostalCode = rdr.GetString(ColumnsInvoiceGet.PayerPostalCode).Trim(),
                                            City = rdr.GetString(ColumnsInvoiceGet.PayerCity),
                                            Province = rdr.GetString(ColumnsInvoiceGet.PayerProvince),
                                            Country = rdr.GetString(ColumnsInvoiceGet.PayerCountry),
                                            Phone = rdr.GetString(ColumnsInvoiceGet.PayerPhone).Trim(),
                                            Email = rdr.GetString(ColumnsInvoiceGet.PayerEmail)
                                        },
                                        Charger = new InvoicePerson
                                        {
                                            Name = rdr.GetString(ColumnsInvoiceGet.ChargerName),
                                            CIF = rdr.GetString(ColumnsInvoiceGet.ChargerCIF),
                                            IBAN = rdr.GetString(ColumnsInvoiceGet.ChargerIBAN),
                                            Address = rdr.GetString(ColumnsInvoiceGet.ChargerAddress),
                                            PostalCode = rdr.GetString(ColumnsInvoiceGet.ChargerPostalCode).Trim(),
                                            City = rdr.GetString(ColumnsInvoiceGet.ChargerCity),
                                            Province = rdr.GetString(ColumnsInvoiceGet.ChargerProvince),
                                            Country = rdr.GetString(ColumnsInvoiceGet.ChargerCountry),
                                            Phone = rdr.GetString(ColumnsInvoiceGet.ChargerPhone).Trim(),
                                            Email = rdr.GetString(ColumnsInvoiceGet.ChargerEmail)
                                        },
                                        ItemDefinitionId = rdr.GetInt64(ColumnsInvoiceGet.ItemDefinitionId),
                                        ItemId = rdr.GetInt64(ColumnsInvoiceGet.ItemId),
                                        CreatedBy = new ApplicationUser
                                        {
                                            Id = rdr.GetInt64(ColumnsInvoiceGet.CreatedBy),
                                            Profile = new Profile
                                            {
                                                ApplicationUserId = rdr.GetInt64(ColumnsInvoiceGet.CreatedBy),
                                                Name = rdr.GetString(ColumnsInvoiceGet.CreatedByName),
                                                LastName = rdr.GetString(ColumnsInvoiceGet.CreatedByLastName),
                                                LastName2 = rdr.GetString(ColumnsInvoiceGet.CreatedByLastName2)
                                            }
                                        },
                                        CreatedOn = rdr.GetDateTime(ColumnsInvoiceGet.CreatedOn),
                                        ModifiedBy = new ApplicationUser
                                        {
                                            Id = rdr.GetInt64(ColumnsInvoiceGet.ModifiedBy),
                                            Profile = new Profile
                                            {
                                                ApplicationUserId = rdr.GetInt64(ColumnsInvoiceGet.ModifiedBy),
                                                Name = rdr.GetString(ColumnsInvoiceGet.ModifiedByName),
                                                LastName = rdr.GetString(ColumnsInvoiceGet.ModifiedByLastName),
                                                LastName2 = rdr.GetString(ColumnsInvoiceGet.ModifiedByLastName2)
                                            }
                                        },
                                        ModifiedOn = rdr.GetDateTime(ColumnsInvoiceGet.ModifiedOn),
                                        Status = rdr.GetInt32(ColumnsInvoiceGet.Status),
                                        Active = rdr.GetBoolean(ColumnsInvoiceGet.Active)
                                    };

                                    res.Add(newInvoice);
                                }
                            }
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return new ReadOnlyCollection<Invoice>(res);
        }

        public static ActionResult Activate(long id, long companyId, long applicationUserId, string instanceName)
        {
            var res = ActionResult.NoAction;
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_Invoice_Activate"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.Input("@Id", id));
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", companyId));
                        cmd.Parameters.Add(DataParameter.Input("@ApplicationUserId", applicationUserId));
                        try
                        {
                            cmd.Connection.Open();
                            cmd.ExecuteNonQuery();
                            res.SetSuccess(id);
                        }
                        catch (SqlException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (NullReferenceException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (Exception ex)
                        {
                            res.SetFail(ex);
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return res;
        }

        public static ActionResult Inactivate(long id, long companyId, long applicationUserId, string instanceName)
        {
            var res = ActionResult.NoAction;
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_Invoice_Inactivate"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.Input("@Id", id));
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", companyId));
                        cmd.Parameters.Add(DataParameter.Input("@ApplicationUserId", applicationUserId));
                        try
                        {
                            cmd.Connection.Open();
                            cmd.ExecuteNonQuery();
                            res.SetSuccess(id);
                        }
                        catch (SqlException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (NullReferenceException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (Exception ex)
                        {
                            res.SetFail(ex);
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return res;
        }

        public static ActionResult SetConfirmed(long id, long companyId, long applicationUserId, string instanceName)
        {
            var res = ActionResult.NoAction;
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_Invoice_SetConfirmed"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.Input("@InvoiceId", id));
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", companyId));
                        cmd.Parameters.Add(DataParameter.Input("@ApplicationUserId", applicationUserId));
                        try
                        {
                            cmd.Connection.Open();
                            cmd.ExecuteNonQuery();
                            res.SetSuccess(id);
                            RenderPdf(id, companyId, instanceName);
                        }
                        catch (SqlException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (NullReferenceException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (Exception ex)
                        {
                            res.SetFail(ex);
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return res;
        }

        public static void RenderPdf(long invoiceId, long companyId, string instanceName)
        {
            var invoice = Invoice.ById(invoiceId, companyId, instanceName);
            var instance = Persistence.InstanceByName(instanceName);
            var dictionary = HttpContext.Current.Session["Dictionary"] as Dictionary<string, string>;
            try
            {
                // Se preparan los objetos para el PDF
                var fontNameCheckbox = Path.Combine(HttpContext.Current.Request.PhysicalApplicationPath + @"Fonts", "webdings.ttf");
                var fontName = Path.Combine(HttpContext.Current.Request.PhysicalApplicationPath + @"Fonts", "calibri.ttf");
                var fontNameBold = Path.Combine(HttpContext.Current.Request.PhysicalApplicationPath + @"Fonts", "calibrib.ttf");
                var baseFontCheckBox = BaseFont.CreateFont(fontNameCheckbox, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
                var baseFont = BaseFont.CreateFont(fontName, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
                var baseFontBold = BaseFont.CreateFont(fontNameBold, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
                var path = HttpContext.Current.Request.PhysicalApplicationPath;
                if (!path.EndsWith(@"\", StringComparison.OrdinalIgnoreCase))
                {
                    path = string.Format(CultureInfo.InvariantCulture, @"{0}\", path);
                }

                var pathPdf = Instance.Path.PdfTemplates(instanceName);

                var fileNameTemplate = string.Format(CultureInfo.InvariantCulture, @"{0}{1}InvoiceTemplate.pdf", pathPdf, pathPdf.EndsWith("\\") ? string.Empty : "\\");
                if (!File.Exists(fileNameTemplate))
                {
                    fileNameTemplate = string.Format(CultureInfo.InvariantCulture, @"{0}{1}\Billing\InvoiceTemplate.pdf", HttpContext.Current.Request.PhysicalApplicationPath, HttpContext.Current.Request.PhysicalApplicationPath.EndsWith("\\") ? string.Empty : "\\");
                }

                // Este el el nombre de la plantilla
                var targetFolder = string.Format(CultureInfo.InvariantCulture, @"{0}{1}\InvoicesPrint", HttpContext.Current.Request.PhysicalApplicationPath, HttpContext.Current.Request.PhysicalApplicationPath.EndsWith("\\") ? string.Empty : "\\");

                // Este el el path final dónde se genera el pdf
                var filePathNew = string.Format(CultureInfo.InvariantCulture, @"{0}\{1}\{2}", targetFolder, instance.Name, companyId);
                Basics.VerifyFolder(filePathNew);
                var fileNameNew = string.Format(CultureInfo.InvariantCulture, @"{0}\Invoice_{1}.pdf", filePathNew, invoiceId);

                // ---------------------------------------
                using (var existingFileStream = new FileStream(fileNameTemplate, FileMode.Open))
                {
                    using (var newFileStream = new FileStream(fileNameNew, FileMode.Create))
                    {
                        var pdfReader = new PdfReader(existingFileStream);
                        var stamper = new PdfStamper(pdfReader, newFileStream);
                        var form = stamper.AcroFields;
                        var fieldKeys = form.Fields.Keys;
                        Pdf.SetMetadata(pdfReader, stamper, invoice.Subject ?? "Factura", string.Empty, "OpenFramework - " + instance.Name);
                        var company = Company.ById(companyId, instanceName);

                        #region lineas
                        decimal baseImponible = 0;
                        decimal iva = 0;
                        decimal iva2 = 0;
                        decimal iva3 = 0;
                        decimal iva4 = 0;
                        decimal total = 0;
                        decimal importeGene = 0;

                        var widths = new float[] { 50f, 65f, 20f, 40f, 40f, 40f, 35f, 35f, 60f };
                        var table = new PdfPTable(widths.Length)
                        {
                            WidthPercentage = 100,
                            HorizontalAlignment = 1,
                            SpacingBefore = 0f,
                            SpacingAfter = 0f
                        };

                        table.SetWidths(widths);
                        table.AddCell(HeaderCellLeft(dictionary["Billing_Receipt_HeaderPDF_Description"], baseFontBold, 3));
                        table.AddCell(HeaderCellRight(dictionary["Billing_Receipt_HeaderPDF_Quantity"], baseFontBold));
                        table.AddCell(HeaderCellRight(dictionary["Billing_Receipt_HeaderPDF_Amount"], baseFontBold));
                        table.AddCell(HeaderCellRight(dictionary["Billing_Receipt_HeaderPDF_Base"], baseFontBold));
                        table.AddCell(HeaderCellLeft(dictionary["Billing_Receipt_HeaderPDF_IVA"], baseFontBold, 2));
                        table.AddCell(HeaderCellRight(dictionary["Billing_Receipt_HeaderPDF_Total"], baseFontBold));

                        int cont = 1;
                        var odd = true;

                        decimal totalBase = 0;
                        decimal totalIVA = 0;
                        decimal totalTotal = 0;

                        foreach (var line in invoice.Lines.Where(l => l.Unbilling == false))
                        {
                            if (invoice.Type == 3 && line.ServeiComplementari == false)
                            {
                                continue;
                            }

                            totalBase += Math.Round(line.BaseImport * line.Quantity, 2);
                            var totalIVALine = Math.Round(line.BaseImport * line.Quantity * (line.IVA / 100), 2);
                            totalIVA += totalIVALine;
                            totalTotal += Math.Round(line.BaseImport * line.Quantity * (1 + line.IVA / 100), 2);

                            table.AddCell(CellTable(line.ConceptText, baseFont, odd, 0, 3));
                            table.AddCell(CellTableMoney(line.Quantity, baseFont, odd, 0));
                            table.AddCell(CellTableMoney(line.BaseImport, baseFont, odd, 0));
                            table.AddCell(CellTableMoney(line.BaseImport * line.Quantity, baseFont, odd, 0));
                            table.AddCell(CellTablePercent(line.IVA, 2, baseFont, odd, 0));
                            table.AddCell(CellTableMoney(line.BaseImport * line.Quantity * line.IVA / 100, baseFont, odd, 0));
                            table.AddCell(CellTableMoney(line.Total, baseFont, odd, 0));
                            cont++;
                            odd = !odd;

                            baseImponible += line.BaseImport;
                            var ivaLine = line.BaseImport * line.IVA * line.Quantity / 100;
                            iva += ivaLine;
                            total += line.BaseImport + ivaLine;

                            switch (line.IVA)
                            {
                                case 4: iva2 += ivaLine; break;
                                case 10: iva3 += ivaLine; break;
                                case 21: iva4 += ivaLine; break;
                            }
                        }

                        table.AddCell(CellTableTotalRight("Total", baseFont, 5));
                        table.AddCell(CellTableTotalMoney(totalBase, baseFont));
                        table.AddCell(CellTableTotalRight(" ", baseFont, 1));
                        table.AddCell(CellTableTotalMoney(totalIVA, baseFont));
                        table.AddCell(CellTableTotalMoney(invoice.Total, baseFont));
                        table.AddCell(CellTableTotalRight(" ", baseFont, 9));

                        foreach (var line in invoice.Lines.Where(l => l.Unbilling == true))
                        {
                            importeGene += Math.Abs(line.Total) * (invoice.Devolucion ? -1 : 1);
                        }

                        odd = true;

                        table.AddCell(CellTableRightResume(ApplicationDictionary.Translate("Billing_Invoice_Label_TotalBaseImponible"), baseFont, odd, 0, 8));
                        table.AddCell(CellTableMoneyResume(totalBase, baseFontBold, odd, 0));

                        var multipleIva = false;
                        if (iva2 > 0 && iva3 > 0)
                        {
                            multipleIva = true;
                        }
                        if (iva3 > 0 && iva4 > 0)
                        {
                            multipleIva = true;
                        }

                        if (iva2 > 0 && iva4 > 0)
                        {
                            multipleIva = true;
                        }

                        if (multipleIva)
                        {
                            if (iva2 > 0)
                            {
                                table.AddCell(CellTableRightResumeSmall("IVA 4%", baseFont, odd, 0, 8));
                                table.AddCell(CellTableMoneyResumeSmall(iva2, baseFontBold, odd, 0));
                            }

                            if (iva3 > 0)
                            {
                                table.AddCell(CellTableRightResumeSmall("IVA 10%", baseFont, odd, 0, 8));
                                table.AddCell(CellTableMoneyResumeSmall(iva3, baseFontBold, odd, 0));
                            }

                            if (iva4 > 0)
                            {
                                table.AddCell(CellTableRightResumeSmall("IVA 21%", baseFont, odd, 0, 8));
                                table.AddCell(CellTableMoneyResumeSmall(iva4, baseFontBold, odd, 0));
                            }
                        }

                        table.AddCell(CellTableRightResume(ApplicationDictionary.Translate("Billing_Invoice_Label_TotalIVA"), baseFont, odd, 0, 8));
                        table.AddCell(CellTableMoneyResume(totalIVA, baseFontBold, odd, 0));
                        table.AddCell(CellTableRightResume(ApplicationDictionary.Translate("Billing_Invoice_Label_TotalFacturaPDF"), baseFont, odd, 0, 8));
                        table.AddCell(CellTableMoneyResume(totalTotal, baseFontBold, odd, 0));

                        #region Get resumen izquierda
                        decimal ImporteUsuario = 0;
                        decimal ImporteGeneralitat = 0;
                        decimal Importe = 0;
                        int Dias = 0;
                        decimal ImporteUsuarioDias = 0;
                        decimal ImporteGeneralitatDias = 0;
                        decimal ImporteDias = 0;
                        decimal TotalFactura = 0;
                        decimal TotalReciboBancario = 0;
                        decimal ServiciosComplementarios = 0;

                        var existsAux = false;
                        using (var cmd = new SqlCommand("TableAux_Invoice_ByIncoiveId"))
                        {
                            using (var cnn = new SqlConnection(instance.Config.ConnectionString))
                            {
                                cmd.Connection = cnn;
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add(DataParameter.Input("@InvoiceId", invoice.Id));
                                try
                                {
                                    cmd.Connection.Open();
                                    using (var rdr = cmd.ExecuteReader())
                                    {
                                        if (rdr.HasRows)
                                        {
                                            existsAux = true;
                                            rdr.Read();
                                            ImporteUsuario = rdr.GetDecimal(1);
                                            ImporteGeneralitat = rdr.GetDecimal(2);
                                            Importe = rdr.GetDecimal(3);
                                            Dias = rdr.GetInt32(4);
                                            ImporteUsuarioDias = rdr.GetDecimal(5);
                                            ImporteGeneralitatDias = rdr.GetDecimal(6);
                                            ImporteDias = rdr.GetDecimal(7);
                                            TotalFactura = rdr.GetDecimal(8);
                                            TotalReciboBancario = rdr.GetDecimal(9);
                                            ServiciosComplementarios = rdr.GetDecimal(10);
                                        }
                                    }
                                }
                                finally
                                {
                                    if (cmd.Connection.State != ConnectionState.Closed)
                                    {
                                        cmd.Connection.Close();
                                    }
                                }
                            }
                        }
                        #endregion

                        if (existsAux)
                        {
                            var totalDiasMes = Constant.FiscalMonthDays;
                            if (invoice.Type == 3)
                            {
                                var inicioMes = new DateTime(invoice.Date.Year, invoice.Date.Month, 1);
                                var finalMes = inicioMes.AddMonths(1).AddDays(-1);
                                totalDiasMes = finalMes.Day;
                            }

                            if (invoice.Devolucion)
                            {
                                decimal totalServeis = 0;
                                var resumne = new List<Phrase>();
                                foreach (var linea in invoice.lines.Where(l => l.Unbilling == false && l.ServeiComplementari == true))
                                {
                                    totalServeis += linea.BaseImport * linea.Quantity * (1 + linea.IVA / 100);
                                }

                                resumne.Add(new Phrase
                                {
                                    new Chunk(ApplicationDictionary.Translate("Total preu plaça") + ": ", new Font(baseFont, 10, Font.NORMAL, BaseColor.BLACK)),
                                    new Chunk(Basics.SpanishMoney(Importe), new Font(baseFont, 10, Font.BOLD, BaseColor.BLACK))
                                });

                                if (Dias < totalDiasMes)
                                {
                                    resumne.Add(new Phrase
                                    {
                                        new Chunk("Estada real de l'usuari ", new Font(baseFont, 10, Font.NORMAL, BaseColor.BLACK)),
                                        new Chunk(Dias.ToString(), new Font(baseFont, 10, Font.BOLD, BaseColor.BLACK)),
                                        new Chunk(" " + ApplicationDictionary.Translate(Dias > 1 ? "Common_Days" : "Common_Day") + " ", new Font(baseFont, 10, Font.BOLD, BaseColor.BLACK)),
                                        new Chunk(Basics.SpanishMoney(ImporteDias), new Font(baseFont, 10, Font.BOLD, BaseColor.BLACK))
                                    });
                                }

                                resumne.Add(new Phrase
                                {
                                    new Chunk(ApplicationDictionary.Translate("Billing_Footer_DevolucioGene") + ": ", new Font(baseFont, 10, Font.NORMAL, BaseColor.BLACK)),
                                    new Chunk(Basics.SpanishMoney(ImporteGeneralitatDias), new Font(baseFont, 10, Font.BOLD, BaseColor.BLACK))
                                });

                                resumne.Add(new Phrase
                                {
                                    new Chunk(ApplicationDictionary.Translate("Billing_Footer_DevolucioUsuari") + ": ", new Font(baseFont, 10, Font.NORMAL, BaseColor.BLACK)),
                                    new Chunk(Basics.SpanishMoney(ImporteUsuarioDias), new Font(baseFont, 10, Font.BOLD, BaseColor.BLACK))
                                });

                                resumne.Add(new Phrase
                                {
                                    new Chunk(ApplicationDictionary.Translate("Serveis complementaris") + ": ", new Font(baseFont, 10, Font.NORMAL, BaseColor.BLACK)),
                                    new Chunk(Basics.SpanishMoney(ServiciosComplementarios), new Font(baseFont, 10, Font.BOLD, BaseColor.BLACK))
                                });

                                resumne.Add(new Phrase
                                {
                                    new Chunk(ApplicationDictionary.Translate("Billing_Footer_DevolucioTotal") + ": ", new Font(baseFont, 10, Font.NORMAL, BaseColor.BLACK)),
                                    new Chunk(Basics.SpanishMoney(TotalReciboBancario), new Font(baseFont, 10, Font.BOLD, BaseColor.BLACK))
                                });

                                var top = 100 + resumne.Count * 15;

                                foreach (var phrase in resumne)
                                {
                                    Pdf.AbsolutePositionLargeText(stamper, phrase, 1, 60, top, 500, baseFont, 10);
                                    top -= 15;
                                }
                            }
                            else
                            {

                                var textoGene = string.Empty;
                                switch (invoice.Type)
                                {
                                    case 0: textoGene = ApplicationDictionary.Translate("Billing_Footer_AportacioGenePEVEndosasa"); break;
                                    case 1: textoGene = ApplicationDictionary.Translate("Billing_Footer_AportacioGenePEVNoEndosasa"); break;
                                    case 3: textoGene = ApplicationDictionary.Translate("Billing_Footer_AportacioGene"); break;
                                    case 4: textoGene = ApplicationDictionary.Translate("Billing_Footer_AportacioGene"); break;
                                }

                                decimal totalServeis = 0;
                                foreach (var linea in invoice.lines.Where(l => l.Unbilling == false && l.ServeiComplementari == true))
                                {
                                    totalServeis += linea.BaseImport * linea.Quantity * (1 + linea.IVA / 100);
                                }

                                var resumne = new List<Phrase>();
                                resumne.Add(new Phrase
                                {
                                    new Chunk(ApplicationDictionary.Translate("Total preu plaça") + ": ", new Font(baseFont, 10, Font.NORMAL, BaseColor.BLACK)),
                                    new Chunk(Basics.SpanishMoney(Importe), new Font(baseFont, 10, Font.BOLD, BaseColor.BLACK))
                                });

                                if (Dias < totalDiasMes)
                                {
                                    resumne.Add(new Phrase
                                    {
                                        new Chunk("Estada real de l'usuari ", new Font(baseFont, 10, Font.NORMAL, BaseColor.BLACK)),
                                        new Chunk(Dias.ToString(), new Font(baseFont, 10, Font.BOLD, BaseColor.BLACK)),
                                        new Chunk(" " + ApplicationDictionary.Translate(Dias > 1 ? "Common_Days" : "Common_Day") + " ", new Font(baseFont, 10, Font.BOLD, BaseColor.BLACK)),
                                        new Chunk(Basics.SpanishMoney(ImporteDias), new Font(baseFont, 10, Font.BOLD, BaseColor.BLACK))
                                    });
                                }

                                var importeGeneralitatFinal = ImporteGeneralitatDias;

                                if (invoice.Type == 0 || invoice.Type == 1 || invoice.Type == 3 || invoice.Type == 4)
                                {
                                    resumne.Add(new Phrase
                                    {
                                        new Chunk(textoGene + ": ", new Font(baseFont, 10, Font.NORMAL, BaseColor.BLACK)),
                                        new Chunk(Basics.SpanishMoney(importeGeneralitatFinal), new Font(baseFont, 10, Font.BOLD, BaseColor.BLACK))
                                    });
                                }

                                resumne.Add(new Phrase
                                {
                                    new Chunk(ApplicationDictionary.Translate(invoice.Type < 3  ? "Preu a aplicar a l'usuari" : "Aportació usuari") + ": ", new Font(baseFont, 10, Font.NORMAL, BaseColor.BLACK)),
                                    new Chunk(Basics.SpanishMoney(ImporteUsuarioDias), new Font(baseFont, 10, Font.BOLD, BaseColor.BLACK))
                                });

                                resumne.Add(new Phrase
                                {
                                    new Chunk(ApplicationDictionary.Translate("Serveis complementaris") + ": ", new Font(baseFont, 10, Font.NORMAL, BaseColor.BLACK)),
                                    new Chunk(Basics.SpanishMoney(ServiciosComplementarios), new Font(baseFont, 10, Font.BOLD, BaseColor.BLACK))
                                });

                                resumne.Add(new Phrase
                                {
                                    new Chunk(ApplicationDictionary.Translate ("Billing_Footer_TotalRebutBancari") + ": ", new Font(baseFont, 10, Font.NORMAL, BaseColor.BLACK)),
                                    new Chunk(Basics.SpanishMoney(TotalReciboBancario), new Font(baseFont, 10, Font.BOLD, BaseColor.BLACK))
                                });

                                var top = 20 + resumne.Count * 15;

                                foreach (var phrase in resumne)
                                {
                                    Pdf.AbsolutePositionLargeText(stamper, phrase, 1, 60, top, 500, baseFont, 10);
                                    top -= 15;
                                }
                            }
                        }

                        odd = false;
                        if (!string.IsNullOrEmpty(invoice.Notes))
                        {
                            table.AddCell(CellTableLeftResume(ApplicationDictionary.Translate("Common_Notes"), baseFont, odd, Rectangle.BOTTOM_BORDER, 5));
                            table.AddCell(new PdfPCell(new Phrase(invoice.Notes, new Font(baseFont, 9, Font.NORMAL, BaseColor.BLACK)))
                            {
                                Border = Rectangle.NO_BORDER,
                                Colspan = 7,
                                Padding = 6f,
                                PaddingTop = 6f,
                                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
                            });
                        }

                        /*if (invoice.Devolucion)
                        {
                            var days = invoice.Date.Day;
                            decimal usuario = total * days / (Constant.FiscalMonthDays - days);
                            decimal usuarioMensual = total * Constant.FiscalMonthDays / (Constant.FiscalMonthDays - days);
                            var cell = new PdfPCell()
                            {
                                Border = Rectangle.NO_BORDER,
                                Colspan = 5,
                                Padding = 6f,
                                PaddingTop = 6f,
                                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
                            };

                            cell.AddElement(new Paragraph(string.Format(CultureInfo.InvariantCulture, "{1}: {0}", Basics.SpanishMoney(usuarioMensual), ApplicationDictionary.Translate("Billing_Footer_AportacioUsuari")), new Font(baseFont, 9, Font.NORMAL, BaseColor.BLACK)));
                            cell.AddElement(new Paragraph(string.Format(CultureInfo.InvariantCulture, "{1} {0} {2}: {3}", days, ApplicationDictionary.Translate("Billing_Footer_TotalDays"), ApplicationDictionary.Translate(days > 1 ? "Common_Days" : "Common_Day"), usuario), new Font(baseFont, 9, Font.NORMAL, BaseColor.BLACK)));

                            table.AddCell(CellTableLeftResume(ApplicationDictionary.Translate("Common_Notes"), baseFont, odd, Rectangle.BOTTOM_BORDER, 5));
                            table.AddCell(cell);
                        }*/

                        var cb1 = stamper.GetOverContent(1);
                        table.TotalWidth = 470;
                        table.WriteSelectedRows(0, -1, 65, 555, cb1);
                        #endregion

                        // Se recorren todos los campos del pdf y a cada uno se pone el contenido
                        foreach (string fieldKey in fieldKeys)
                        {
                            switch (fieldKey)
                            {
                                case "FechaFactura":
                                    form.SetField(fieldKey, string.Format(CultureInfo.InvariantCulture, "{0}: {1:dd/MM/yyyy}", ApplicationDictionary.Translate("Billing_Invoice_Label_Date"), invoice.Date));
                                    form.SetFieldProperty(fieldKey, "textsize", (float)12, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFontBold, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "FechaVto":
                                    form.SetField(fieldKey, string.Format(CultureInfo.InvariantCulture, "{0}: {1:dd/MM/yyyy}", ApplicationDictionary.Translate("Billing_Invoice_Label_DateVto"), invoice.Date));
                                    form.SetFieldProperty(fieldKey, "textsize", (float)12, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFontBold, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "NumeroFactura":
                                    var numberText = string.Format(CultureInfo.InvariantCulture, "{2}: {0:000}/{1}", invoice.Number, invoice.Date.Year, ApplicationDictionary.Translate("Billing_NumFacturaPDF"));
                                    if (invoice.Number < 1)
                                    {
                                        numberText = "PROFORMA";
                                    }
                                    form.SetField(fieldKey, numberText);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)12, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFontBold, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "PaymentMethod":
                                    form.SetField(fieldKey, invoice.PaymentMethodText(dictionary));
                                    form.SetFieldProperty(fieldKey, "textsize", (float)10, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFont, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "CECO":
                                    form.SetField(fieldKey, invoice.CECO);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)12, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFontBold, null);
                                    form.RegenerateField(fieldKey);
                                    break;


                                case "PayerName":
                                    form.SetField(fieldKey, invoice.Payer.Name);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)12, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFontBold, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "PayerNIF":
                                    form.SetField(fieldKey, "NIF: " + invoice.Payer.CIF);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)10, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFont, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "PayerAddress":
                                    form.SetField(fieldKey, invoice.Payer.Address);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)10, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFont, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "PayerCity":
                                    form.SetField(fieldKey, invoice.Payer.City + ", " + invoice.Payer.PostalCode + " -  " + invoice.Payer.Province);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)10, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFont, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "PayerIBAN":
                                    form.SetField(fieldKey, "IBAN: " + invoice.Payer.IBAN);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)10, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFont, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "PayerPhone":
                                    form.SetField(fieldKey, "Telèfon: " + invoice.Payer.Phone);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)10, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFont, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "PayerEmail":
                                    form.SetField(fieldKey, invoice.Payer.Email);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)10, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFont, null);
                                    form.RegenerateField(fieldKey);
                                    break;


                                case "ChargerName":
                                    form.SetField(fieldKey, invoice.Charger.Name);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)12, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFontBold, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "ChargerCIF":
                                    form.SetField(fieldKey, "CIF: " + invoice.Charger.CIF);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)10, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFont, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "ChargerAddress":
                                    form.SetField(fieldKey, invoice.Charger.Address);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)10, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFont, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "ChargerCity":
                                    form.SetField(fieldKey, invoice.Charger.City + ", " + invoice.Charger.PostalCode);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)10, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFont, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "ChargerProvince":
                                    form.SetField(fieldKey, invoice.Charger.Province);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)10, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFont, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "ChargerPhone":
                                    form.SetField(fieldKey, invoice.Charger.Phone);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)10, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFont, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "ChargerEmail":
                                    form.SetField(fieldKey, invoice.Charger.Email);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)10, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFont, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "ChargerIBAN":
                                    form.SetField(fieldKey, "IBAN:" + invoice.Charger.IBAN);
                                    form.SetFieldProperty(fieldKey, "textsize", (float)10, null);
                                    form.SetFieldProperty(fieldKey, "textfont", baseFont, null);
                                    form.RegenerateField(fieldKey);
                                    break;
                                case "ChargerSWIFT":
                                    if (!string.IsNullOrEmpty(invoice.Charger.SWIFT))
                                    {
                                        form.SetField(fieldKey, "BIC:" + invoice.Charger.SWIFT);
                                        form.SetFieldProperty(fieldKey, "textsize", (float)10, null);
                                        form.SetFieldProperty(fieldKey, "textfont", baseFont, null);
                                        form.RegenerateField(fieldKey);
                                    }

                                    break;
                            }
                        }

                        var logoPath = Instance.Path.Data(instanceName) + "\\CompanyData\\" + companyId.ToString() + "\\PDFLogo.png";
                        if (!File.Exists(logoPath))
                        {
                            logoPath = Instance.Path.Data(instanceName) + "\\CompanyData\\" + companyId.ToString() + "\\PDFLogo.png";
                            if (!File.Exists(logoPath))
                            {
                                logoPath = Instance.Path.Data(instanceName) + "\\CompanyData\\" + companyId.ToString() + "\\Logo.png";
                            }
                        }

                        var logo = Image.GetInstance(logoPath);
                        logo.SetAbsolutePosition(65, 720);
                        var canvas1 = stamper.GetOverContent(1);
                        canvas1.AddImage(logo);

                        Pdf.AbsolutePosition(stamper, dictionary["Billing_Invoice_FooterCurrency"], 1, 60, 15, 400, baseFont, 8);

                        // Se acaba el rellenado del formulario
                        stamper.FormFlattening = true;

                        try
                        {
                            stamper.Close();
                            pdfReader.Close();
                            // No se genera el SEPA en la confirmación de proforma
                            // invoice.GetSEPA(TotalReciboBancario);
                        }
                        catch (Exception ex)
                        {
                            ExceptionManager.Trace(ex, "Print invoice");
                            fileNameNew = ex.Message;
                        }
                    }
                }
                // ---------------------------------------
            }
            catch (Exception ex)
            {
                ExceptionManager.Trace(ex, string.Format(CultureInfo.InvariantCulture, @"Invice({0}, {1})", instance.Name, invoiceId));
            }
        }

        public static ActionResult SetSent(long id, string mailAddress, DateTime dateSent, string mailBoxName, long companyId, long applicationUserId, string instanceName)
        {
            var res = ActionResult.NoAction;
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_Invoice_SetSent"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.Input("@InvoiceId", id));
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", companyId));
                        cmd.Parameters.Add(DataParameter.Input("@DateSend", dateSent));
                        cmd.Parameters.Add(DataParameter.Input("@ApplicationUserId", applicationUserId));
                        try
                        {
                            cmd.Connection.Open();
                            cmd.ExecuteNonQuery();

                            //Send(Invoice.ById(id), mailAddress, instance.Name, mailBoxName);

                            res.SetSuccess(id);
                        }
                        catch (SqlException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (NullReferenceException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (Exception ex)
                        {
                            res.SetFail(ex);
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return res;
        }

        public static ActionResult SetPayed(long id, DateTime datePay, long companyId, long applicationUserId, string instanceName)
        {
            var res = ActionResult.NoAction;
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_Invoice_SetPayed"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.Input("@InvoiceId", id));
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", companyId));
                        cmd.Parameters.Add(DataParameter.Input("@DatePay", datePay));
                        cmd.Parameters.Add(DataParameter.Input("@ApplicationUserId", applicationUserId));
                        try
                        {
                            cmd.Connection.Open();
                            cmd.ExecuteNonQuery();
                            res.SetSuccess(id);
                        }
                        catch (SqlException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (NullReferenceException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (Exception ex)
                        {
                            res.SetFail(ex);
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return res;
        }

        public static ActionResult SetSEPA(long id, long companyId, long applicationUserId, string instanceName)
        {
            var res = ActionResult.NoAction;
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_Invoice_SetSEPA"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.Input("@InvoiceId", id));
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", companyId));
                        cmd.Parameters.Add(DataParameter.Input("@ApplicationUserId", applicationUserId));
                        try
                        {
                            cmd.Connection.Open();
                            cmd.ExecuteNonQuery();
                            res.SetSuccess(id);
                        }
                        catch (SqlException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (NullReferenceException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (Exception ex)
                        {
                            res.SetFail(ex);
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return res;
        }

        public static ActionResult SetRefused(long id, DateTime dateRefuse, string refuseReason, long companyId, long applicationUserId, string instanceName)
        {
            var res = ActionResult.NoAction;
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_Invoice_SetRefused"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.Input("@InvoiceId", id));
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", companyId));
                        cmd.Parameters.Add(DataParameter.Input("@DateRefuse", dateRefuse));
                        cmd.Parameters.Add(DataParameter.Input("@RefuseReason", refuseReason, 100));
                        cmd.Parameters.Add(DataParameter.Input("@ApplicationUserId", applicationUserId));
                        try
                        {
                            cmd.Connection.Open();
                            cmd.ExecuteNonQuery();
                            res.SetSuccess(id);
                        }
                        catch (SqlException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (NullReferenceException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (Exception ex)
                        {
                            res.SetFail(ex);
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return res;
        }

        public static ActionResult SetAnulated(long id, DateTime dateRefuse, string refuseReason, long companyId, long applicationUserId, string instanceName)
        {
            var res = ActionResult.NoAction;
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_Invoice_SetAnulated"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.Input("@InvoiceId", id));
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", companyId));
                        cmd.Parameters.Add(DataParameter.Input("@DateRefuse", dateRefuse));
                        cmd.Parameters.Add(DataParameter.Input("@RefuseReason", refuseReason, 100));
                        cmd.Parameters.Add(DataParameter.Input("@ApplicationUserId", applicationUserId));
                        try
                        {
                            cmd.Connection.Open();
                            cmd.ExecuteNonQuery();
                            res.SetSuccess(id);
                        }
                        catch (SqlException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (NullReferenceException ex)
                        {
                            res.SetFail(ex);
                        }
                        catch (Exception ex)
                        {
                            res.SetFail(ex);
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return res;
        }

        public static long LastNumber(long companyId, string instanceName)
        {
            long res = 0;
            var cns = Persistence.ConnectionString(instanceName);
            if (!string.IsNullOrEmpty(cns))
            {
                using (var cmd = new SqlCommand("Billing_LastInvoiceNumber"))
                {
                    using (var cnn = new SqlConnection(cns))
                    {
                        cmd.Connection = cnn;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(DataParameter.Input("@CompanyId", companyId));
                        try
                        {
                            cmd.Connection.Open();
                            cmd.ExecuteNonQuery();
                            using (var rdr = cmd.ExecuteReader())
                            {
                                while (rdr.Read())
                                {
                                    res = rdr.GetInt64(0);
                                }
                            }
                        }
                        finally
                        {
                            if (cmd.Connection.State != ConnectionState.Closed)
                            {
                                cmd.Connection.Close();
                            }
                        }
                    }
                }
            }

            return res;
        }

        /// <summary>Creates de cell for list header</summary>
        /// <param name="label">Label to show</param>
        /// <param name="font">Font for content</param>
        /// <returns>Cel for list header</returns>
        public static PdfPCell HeaderCellLeft(string label, BaseFont font)
        {
            var finalLabel = string.Empty;
            if (!string.IsNullOrEmpty(label))
            {
                finalLabel = label;
            }

            return new PdfPCell(new Phrase(finalLabel, new Font(font, 9, Font.NORMAL, BaseColor.BLACK)))
            {
                Border = Rectangle.BOTTOM_BORDER,
                HorizontalAlignment = Element.ALIGN_LEFT,
                Padding = 4
            };
        }

        /// <summary>Creates de cell for list header</summary>
        /// <param name="label">Label to show</param>
        /// <param name="font">Font for content</param>
        /// <returns>Cel for list header</returns>
        public static PdfPCell HeaderCellLeft(string label, BaseFont font, int span)
        {
            var finalLabel = string.Empty;
            if (!string.IsNullOrEmpty(label))
            {
                finalLabel = label;
            }

            return new PdfPCell(new Phrase(finalLabel, new Font(font, 9, Font.NORMAL, BaseColor.BLACK)))
            {
                Border = Rectangle.BOTTOM_BORDER,
                HorizontalAlignment = Element.ALIGN_LEFT,
                Padding = 4,
                Colspan = span
            };
        }

        /// <summary>Creates de cell for list header</summary>
        /// <param name="label">Label to show</param>
        /// <param name="font">Font for content</param>
        /// <returns>Cel for list header</returns>
        public static PdfPCell HeaderCellRight(string label, BaseFont font)
        {
            var finalLabel = string.Empty;
            if (!string.IsNullOrEmpty(label))
            {
                finalLabel = label;
            }

            return new PdfPCell(new Phrase(finalLabel, new Font(font, 9, Font.NORMAL, BaseColor.BLACK)))
            {
                Border = Rectangle.BOTTOM_BORDER,
                HorizontalAlignment = Element.ALIGN_RIGHT,
                Padding = 4
            };
        }

        /// <summary>Creates de cell for list header</summary>
        /// <param name="label">Label to show</param>
        /// <param name="font">Font for content</param>
        /// <returns>Cel for list header</returns>
        public static PdfPCell HeaderCell(string label, BaseFont font)
        {
            var finalLabel = string.Empty;
            if (!string.IsNullOrEmpty(label))
            {
                finalLabel = label;
            }

            return new PdfPCell(new Phrase(finalLabel.ToUpperInvariant(), new Font(font, 9, Font.NORMAL, BaseColor.BLACK)))
            {
                Border = Rectangle.BOTTOM_BORDER,
                HorizontalAlignment = Element.ALIGN_CENTER,
                Padding = 4
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <param name="border">Type of border</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTableCenter(string value, BaseFont font, bool odd, int border)
        {
            var finalValue = string.Empty;
            if (!string.IsNullOrEmpty(value))
            {
                finalValue = value;
            }

            return new PdfPCell(new Phrase(finalValue, new Font(font, 9, Font.NORMAL, BaseColor.BLACK)))
            {
                HorizontalAlignment = Rectangle.ALIGN_CENTER,
                Border = border,
                Padding = 6f,
                PaddingTop = 6f,
                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTableCenter(string value, BaseFont font, bool odd)
        {
            var finalValue = string.Empty;
            if (!string.IsNullOrEmpty(value))
            {
                finalValue = value;
            }

            return new PdfPCell(new Phrase(finalValue, new Font(font, 9, Font.NORMAL, BaseColor.BLACK)))
            {
                HorizontalAlignment = Rectangle.ALIGN_CENTER,
                Border = Rectangle.NO_BORDER,
                Padding = 6f,
                PaddingTop = 6f,
                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTableRight(string value, BaseFont font, bool odd)
        {
            var finalValue = string.Empty;
            if (!string.IsNullOrEmpty(value))
            {
                finalValue = value;
            }

            return new PdfPCell(new Phrase(finalValue, new Font(font, 9, Font.NORMAL, BaseColor.BLACK)))
            {
                HorizontalAlignment = Rectangle.ALIGN_RIGHT,
                Border = Rectangle.NO_BORDER,
                Padding = 6f,
                PaddingTop = 6f,
                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTableRight(string value, BaseFont font, bool odd, int span)
        {
            var finalValue = string.Empty;
            if (!string.IsNullOrEmpty(value))
            {
                finalValue = value;
            }

            return new PdfPCell(new Phrase(finalValue, new Font(font, 9, Font.NORMAL, BaseColor.BLACK)))
            {
                Colspan = span,
                HorizontalAlignment = Rectangle.ALIGN_RIGHT,
                Border = Rectangle.NO_BORDER,
                Padding = 6f,
                PaddingTop = 6f,
                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTableTotalRight(string value, BaseFont font, int span)
        {
            var finalValue = string.Empty;
            if (!string.IsNullOrEmpty(value))
            {
                finalValue = value;
            }

            return new PdfPCell(new Phrase(finalValue, new Font(font, 9, Font.BOLD, BaseColor.BLACK)))
            {
                Colspan = span,
                HorizontalAlignment = Rectangle.ALIGN_RIGHT,
                Border = Rectangle.TOP_BORDER,
                Padding = 6f,
                PaddingTop = 2f,
                BackgroundColor = BaseColor.WHITE
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <param name="border">Type of border</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTable(string value, BaseFont font, bool odd, int border)
        {
            var finalValue = string.Empty;
            if (!string.IsNullOrEmpty(value))
            {
                finalValue = value;
            }

            return new PdfPCell(new Phrase(finalValue, new Font(font, 9, Font.NORMAL, BaseColor.BLACK)))
            {
                Border = border,
                Padding = 6f,
                PaddingTop = 6f,
                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <param name="border">Type of border</param>
        /// <param name="span">Column span</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTable(string value, BaseFont font, bool odd, int border, int span)
        {
            var finalValue = string.Empty;
            if (!string.IsNullOrEmpty(value))
            {
                finalValue = value;
            }

            return new PdfPCell(new Phrase(finalValue, new Font(font, 9, Font.NORMAL, BaseColor.BLACK)))
            {
                Colspan = span,
                Border = border,
                Padding = 6f,
                PaddingTop = 2f,
                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <param name="border">Type of border</param>
        /// <param name="span">Column span</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTableLeftResume(string value, BaseFont font, bool odd, int border, int span)
        {
            var finalValue = string.Empty;
            if (!string.IsNullOrEmpty(value))
            {
                finalValue = value;
            }

            return new PdfPCell(new Phrase(finalValue, new Font(font, 13, Font.NORMAL, BaseColor.BLACK)))
            {
                Colspan = span,
                Border = border,
                Padding = 6f,
                PaddingTop = 6f,
                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <param name="border">Type of border</param>
        /// <param name="span">Column span</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTableRightResumeSmall(string value, BaseFont font, bool odd, int border, int span)
        {
            var finalValue = string.Empty;
            if (!string.IsNullOrEmpty(value))
            {
                finalValue = value;
            }

            return new PdfPCell(new Phrase(finalValue, new Font(font, 12, Font.NORMAL, BaseColor.BLACK)))
            {
                HorizontalAlignment = Rectangle.ALIGN_RIGHT,
                Colspan = span,
                Border = border,
                Padding = 6f,
                PaddingTop = 2f,
                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <param name="border">Type of border</param>
        /// <param name="span">Column span</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTableRightResume(string value, BaseFont font, bool odd, int border, int span)
        {
            var finalValue = string.Empty;
            if (!string.IsNullOrEmpty(value))
            {
                finalValue = value;
            }

            return new PdfPCell(new Phrase(finalValue, new Font(font, 12, Font.NORMAL, BaseColor.BLACK)))
            {
                HorizontalAlignment = Rectangle.ALIGN_RIGHT,
                Colspan = span,
                Border = border,
                Padding = 6f,
                PaddingTop = 2f,
                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <param name="border">Type of border</param>
        /// <param name="span">Column span</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTableInfo(string value, BaseFont font, bool odd, int border, int span)
        {
            var finalValue = string.Empty;
            if (!string.IsNullOrEmpty(value))
            {
                finalValue = value;
            }

            return new PdfPCell(new Phrase(finalValue, new Font(font, 10, Font.NORMAL, BaseColor.BLACK)))
            {
                HorizontalAlignment = Rectangle.ALIGN_LEFT,
                Colspan = span,
                Border = border,
                Padding = 6f,
                PaddingTop = 6f,
                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="decimals">Number or decimals</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <param name="border">Type of border</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTablePercent(decimal value, int decimals, BaseFont font, bool odd, int border)
        {
            var pattern = "{0:#0";
            if (decimals > 0)
            {
                pattern += ".";
                for (var x = 0; x < decimals; x++)
                {
                    pattern += "0";
                }
            }

            pattern += "}%";

            var finalValue = string.Format(CultureInfo.InvariantCulture, pattern, value);

            return new PdfPCell(new Phrase(finalValue, new Font(font, 9, Font.NORMAL, BaseColor.BLACK)))
            {
                HorizontalAlignment = Rectangle.ALIGN_RIGHT,
                Border = border,
                Padding = 6f,
                PaddingTop = 2f,
                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <param name="border">Type of border</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTableMoneyResume(decimal value, BaseFont font, bool odd, int border)
        {
            var finalValue = string.Format(CultureInfo.InvariantCulture,"{0} €", Basics.SpanishMoney(value));

            return new PdfPCell(new Phrase(finalValue, new Font(font, 12, Font.NORMAL, BaseColor.BLACK)))
            {
                HorizontalAlignment = Rectangle.ALIGN_RIGHT,
                Border = border,
                Padding = 6f,
                PaddingTop = 2f,
                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <param name="border">Type of border</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTableMoneyInfo(decimal value, BaseFont font, bool odd, int border)
        {
            var finalValue = Basics.SpanishMoney(value);

            return new PdfPCell(new Phrase(finalValue, new Font(font, 10, Font.NORMAL, BaseColor.BLACK)))
            {
                HorizontalAlignment = Rectangle.ALIGN_RIGHT,
                Border = border,
                Padding = 6f,
                PaddingTop = 6f,
                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <param name="border">Type of border</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTableMoneyResumeSmall(decimal value, BaseFont font, bool odd, int border)
        {
            var finalValue = Basics.SpanishMoney(value);

            return new PdfPCell(new Phrase(finalValue, new Font(font, 12, Font.NORMAL, BaseColor.BLACK)))
            {
                HorizontalAlignment = Rectangle.ALIGN_RIGHT,
                Border = border,
                Padding = 6f,
                PaddingTop = 2f,
                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <param name="border">Type of border</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTableTotalMoney(decimal value, BaseFont font)
        {
            var finalValue = Basics.SpanishMoney(value);

            return new PdfPCell(new Phrase(finalValue, new Font(font, 9, Font.BOLD, BaseColor.BLACK)))
            {
                HorizontalAlignment = Rectangle.ALIGN_RIGHT,
                Border = Rectangle.TOP_BORDER,
                Padding = 6f,
                PaddingTop = 2f,
                BackgroundColor = BaseColor.WHITE
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <param name="border">Type of border</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTableMoney(decimal value, BaseFont font, bool odd, int border)
        {
            var finalValue = Basics.SpanishMoney(value);

            return new PdfPCell(new Phrase(finalValue, new Font(font, 9, Font.NORMAL, BaseColor.BLACK)))
            {
                HorizontalAlignment = Rectangle.ALIGN_RIGHT,
                Border = border,
                Padding = 6f,
                PaddingTop = 2f,
                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="value">Value to show</param>
        /// <param name="font">Font for content</param>
        /// <param name="odd">Indicates if row is odd</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTable(string value, BaseFont font, bool odd)
        {
            var finalValue = string.Empty;
            if (!string.IsNullOrEmpty(value))
            {
                finalValue = value;
            }

            return new PdfPCell(new Phrase(finalValue, new Font(font, 9, Font.NORMAL, BaseColor.BLACK)))
            {
                Border = Rectangle.NO_BORDER,
                Padding = 6f,
                PaddingTop = 6f,
                BackgroundColor = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240)
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="odd">Indicates if row is odd</param>
        /// <param name="font">Font for content</param>
        /// <param name="border">Type fo border</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTableBlank(bool odd, BaseFont font, int border)
        {
            var color = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240);
            return new PdfPCell(new Phrase("͏-", new Font(font, 9, Font.NORMAL, color)))
            {
                Border = border,
                Padding = 6f,
                PaddingTop = 6f,
                BackgroundColor = color
            };
        }

        /// <summary>Creates a cell table</summary>
        /// <param name="odd">Indicates if row is odd</param>
        /// <param name="font">Font for content</param>
        /// <returns>Cell table</returns>
        public static PdfPCell CellTableBlank(bool odd, BaseFont font)
        {
            var color = odd ? BaseColor.WHITE : new BaseColor(240, 240, 240);
            return new PdfPCell(new Phrase("͏-", new Font(font, 9, Font.NORMAL, color)))
            {
                Border = Rectangle.NO_BORDER,
                Padding = 6f,
                PaddingTop = 6f,
                BackgroundColor = color
            };
        }

        public static ActionResult Send(Invoice invoice, string mailAddress, string instanceName, string mailBoxName)
        {
            var res = ActionResult.NoAction;
            var company = Company.ById(invoice.CompanyId, Persistence.ConnectionString(instanceName));
            var mailBox = Persistence.MailBoxByCode(mailBoxName, instanceName);
            var body = string.Empty;
            var templatePath = string.Format(HttpContext.Current.Request.PhysicalApplicationPath + "Billing\\Mail.tplx");
            using (var input = new StreamReader(templatePath))
            {
                body = input.ReadToEnd();
            }

            body = body.Replace("#CHARGERNAME#", invoice.Charger.Name);
            body = body.Replace("#CHARGERADDRESS#", string.Format(
                CultureInfo.InvariantCulture,
                "{0}<br />{1}<br />{2} - {3}",
                invoice.Charger.Address,
                invoice.Charger.City,
                invoice.Charger.PostalCode,
                invoice.Charger.Province));
            body = body.Replace("#PAYERNAME#", invoice.Payer.Name);
            body = body.Replace("#PAYERNIF#", invoice.Payer.CIF);
            body = body.Replace("#PAYERADDRESS#", string.Format(
                CultureInfo.InvariantCulture,
                "{0}<br />{1}<br />{2} - {3}",
                invoice.Payer.Address,
                invoice.Payer.City,
                invoice.Payer.PostalCode,
                invoice.Payer.Province));
            body = body.Replace("#LOGO#", string.Format(
                CultureInfo.InvariantCulture,
                "http://{0}.openframework.es/Instances/{0}/Data/CompanyData/{1}/Logo.png",
                instanceName,
                company.Id));

            var mailMessage = new MailMessage
            {
                From = new MailAddress(mailBox.MailAddress, company.Name),
                Subject = invoice.Subject,
                Body = body,
                IsBodyHtml = true
            };

            var to = "althera2004@gmail.com";

            mailMessage.To.Add(new MailAddress(to));
            mailMessage.Bcc.Add("jcastilla@openframework.es");

            var attachment = new Attachment(HttpContext.Current.Request.PhysicalApplicationPath + "InvoicesPrint\\" + invoice.CompanyId + "\\Invoice_" + invoice.Id + ".pdf")
            {
                Name = invoice.Subject + ".pdf"
            };


            mailMessage.Attachments.Add(attachment);
            var smtpClient = new SmtpClient
            {
                Host = mailBox.Server,
                Port = mailBox.SendPort,
                Credentials = new System.Net.NetworkCredential(mailBox.MailUser, mailBox.MailPassword),
                EnableSsl = false
            };

            try
            {
                smtpClient.Send(mailMessage);
                res.SetSuccess(to);
            }
            catch (Exception ex)
            {
                res.SetFail(ex);
            }

            return res;
        }
    }
}