function PageForm(config) {
    var _this = this;
    this.Data = [];
    this.FormId = config.FormId;
    this.ItemDefinition = ItemDefinitionById(config.ItemId);
    this.ItemName = this.ItemDefinition.ItemName;
    this.Definition = null;
    this.DefaultTabId = '';

    this.Init = function () {
        this.Definition = ItemFormById(this.ItemDefinition, this.FormId);

        // Definir tabDefault;
        this.DefaultTabId = '';
        for (var t = 0; t < this.Definition.Tabs.length; t++) {
            if (HasPropertyEnabled(this.Definition.Tabs[t].Persistent) === false) {
                if (this.DefaultTabId === "") {
                    this.DefaultTabId = this.Definition.Tabs[t].Id;
                }
                if (HasPropertyEnabled(this.Definition.Tabs[t].Default)) {
                    this.DefaultTabId = this.Definition.Tabs[t].Id;
                    break;
                }
            }
        }

        if (this.Definition === null) {
            this.Definition = this.FormDefinitionDefault();
        }
    };

    this.Fill = function (data) {
        var itemDefinition = this.ItemDefinition;
        $.each($(".form-control"), function () {
            var fieldName = $(this)[0].id;
            var dataValue = null;
            var itemField = GetFieldDefinition(fieldName, itemDefinition);

            switch (itemField.Type.toLowerCase()) {
                case "datetime":
                    if (typeof data[fieldName] === "string") {
                        dataValue = data[fieldName];
                    }
                    else {
                        dataValue = GetDateText(data[fieldName], "/", true);
                    }
                    break;
                case "long":
                    if (IsFK(this.itemDefinition, itemField.Name)) {
                        var fkItemName = itemField.Name.substr(0, itemField.Name.length - 2);
                        console.log("formtools", fkItemName);
                        FillComboFromFK(itemField.Name, fkItemName, ItemData.OriginalItemData[itemField.Name]);
                        dataValue = data[fieldName];
                    }
                    else {
                        dataValue = data[fieldName];
                    }
                    break;
                case "bool":
                    var checkValue = false;

                    if (data[fieldName] === true) {
                        checkValue = true;
                    }

                    $("#" + itemField.Name).prop("checked", checkValue);

                    break;
                case "fixedlist":
                    dataValue = data[fieldName];
                    var fixedListValue = data[fieldName];

                    $("#RB_" + fieldName + "_" + fixedListValue).prop("checked", true);

                    break;
                default:
                    dataValue = data[fieldName];
                    break;
            }

            if (data !== null) {
                $(this).val(dataValue);
            }
        });
    }

    this.FormDefinitionDefault = function () {
        var formDefinition = {
            "Id": "Custom",
            "FormType": "Custom",
            "DefaultSelected": true,
            "Actions": [],
            "Tabs": [{
                "Id": "autogenerated",
                "Label": "Dades bàsiques",
                "Rows": []
            }]
        };

        // Si hay itemDefinition se crean los campos en el tab
        if (typeof this.ItemDefinition !== "undefined" && this.ItemDefinition !== null) {
            for (var f = 0; f < this.ItemDefinition.Fields.length; f++) {
                var field = this.ItemDefinition.Fields[f];
                if (field.Name !== "Id") {
                    if (HasPropertyEnabled(field.Internal)) { continue; }
                    var row = { "Fields": [{ "Name": field.Name }] };
                    formDefinition.Tabs[0].Rows.push(row);
                }
            }
        }

        return formDefinition;
    }

    this.Render = function (targetId) {
        console.log("Life cycle", "RenderForm init");
        this.RenderPersistent();
        this.RenderTabs(targetId);
        this.RenderContent(targetId);
        this.RenderFooterActions();
        $(".form-control").on("keyup", ItemUpdateData);
        $(".form-control").on("change", ItemUpdateData);
        $(".datepicker").on("change", ItemUpdateData);
        $(".datepicker").localDatePicker();
        $(".input-group-button_url").on("click", GroupButtonUrlClicked);
        console.log("Life cycle", "RenderForm end " + ListSources.length);
    }

    this.RenderFooterActions = function () {
        res = "";
        if (HasPropertyValue(this.Definition.Actions)) {

            var tabs = _.keys(_.countBy(ItemDefinition.Forms[0].Actions, function (data) { return data.Tab; }));

            for (var t = 0; t < tabs.length; t++) {

                var tabId = tabs[t];
                var ButtonLabel = "Accions ";
                var buttonStyle = "style=\"display:none;\"";
                var ButtonClass=" tabbed";
                if (tabId === "undefined") {
                    var actionsNoGroup = this.Definition.Actions.filter(function (item) { return typeof item.Group === "undefined" && typeof item.Tab === "undefined"; });
                    var actionsGroup = this.Definition.Actions.filter(function (item) { return typeof item.Group !== "undefined" && typeof item.Tab === "undefined"; });
                    buttonStyle = "";
                    ButtonClass = "";
                } else {
                    var actionsNoGroup = this.Definition.Actions.filter(function (item) { return typeof item.Group === "undefined" && item.Tab === tabId; });
                    var actionsGroup = this.Definition.Actions.filter(function (item) { return typeof item.Group !== "undefined" && item.Tab === tabId; });
                    ButtonLabel += this.ItemDefinition.Forms[0].Tabs.filter(function (item) { return item.Id === tabId; })[0].Label.toLowerCase();

                    if (this.DefaultTabId === tabId) {
                        buttonStyle = "";
                    }
                }


                actionsGroup.sort(function (a, b) {
                    return (a.Group > b.Group) ? 1 : -1;
                });
                res += "<div class=\"btn-group dropup\">";
                res += " <button type=\"button\" id=\"dropdown-menu-up-launcher-" + tabId + "\" data-toggle=\"dropdown\" class=\"btn btn-info dropdown-toggle" + ButtonClass + "\" aria-expanded=\"false\" " + buttonStyle + "> <span id=\"dropdown-menu-up1-launcherLabel\">" + ButtonLabel + "</span>&nbsp;<span class=\"ace-icon fa fa-caret-up icon-only\"></span></button>";
                res += "   <ul class=\"dropdown-menu dropdown-inverse dropdown-menu-up\" id=\"dropdown-menu-up1\" style=\"text-align: left;\">";

                var actualGroup = "";
                for (var x = 0; x < actionsGroup.length; x++) {
                    var action = actionsGroup[x];
                    var title = action.Group;
                    if (typeof title === "undefined") { title = ""; }

                    if (title !== actualGroup) {
                        actualGroup = title;
                        res += "<li class=\"dropup-title\">" + title + "</li>";
                    }

                    res += "    <li id=\"BtnAction" + action.Action + "\" onclick=\"" + action.Action + "();\"><a href=\"#\"><i class=\"fa " + action.Icon + " bigger-110\" style=\"width: 25px;\"></i><span id=\"BtnAction" + action.Action + "_Label\">" + action.Label + "</span></a></li>";
                }

                if (actionsNoGroup.length > 0 && actionsGroup.length > 0) {
                    res += "<li><hr style=\"margin-top:8px;margin-bottom:4px;\"></li>";
                }

                if (actionsNoGroup.length > 0) {
                    for (var x = 0; x < actionsNoGroup.length; x++) {
                        var action = actionsNoGroup[x];
                        res += "    <li id=\"BtnAction" + action.Action + "\" onclick=\"" + action.Action + "();\"><a href=\"#\"><i class=\"fa " + action.Icon + " bigger-110\" style=\"width: 25px;\"></i><span id=\"BtnAction" + action.Action + "_Label\">" + action.Label + "</span></a></li>";
                    }
                }

                res += "  </ul>";
                res += "</div>";
            }
        }

        $("#FormBtnDelete").before(res);
    }

    this.RenderPersistent = function () {
        var persistentTab = null;
        for (var t = 0; t < this.Definition.Tabs.length; t++) {
            if (this.Definition.Tabs[t].Persistent === true) {
                persistentTab = this.Definition.Tabs[t];
                break;
            }
        }

        if (persistentTab !== null) {
            var rows = persistentTab.Rows;
            var res = "<div class=\"form-group col-xs-12\">";
            for (var r = 0; r < rows.length; r++) {
                res += this.RenderRow(rows[r]);
            }

            res += "</div>";
            $("#PersistentFields").html(res);
        }
        else {
            console.log("No persistent Tab");
        }
    }

    this.RenderTabs = function (targetId) {
        var res = "";
        var defaultTab = 0;
        var realTab = 0;
        for (var t = 0; t < this.Definition.Tabs.length; t++) {
            if (this.Definition.Tabs[t].Persistent !== true) {
                var tab = this.Definition.Tabs[t];
                var active = realTab === defaultTab ? "active" : " ";
                res += "<li id=\"tabSelect-" + tab.Id + "\" class=\"tabSelect " + active + "\"><a data-toggle=\"tab\" href=\"#tab-" + tab.Id + "\" aria-expanded=\"false\">" + tab.Label + "</a></li>";
                realTab++;
            }
        }

        $("#" + targetId + "Tabs").html(res);
        $(".tabSelect").on("click", LayoutTabSelected)
    }

    this.RenderContent = function (targetId) {
        var res = "";

        var defaultTab = 0;
        var realTab = 0;
        for (var t = 0; t < this.Definition.Tabs.length; t++) {
            if (this.Definition.Tabs[t].Persistent !== true) {
                var tab = this.Definition.Tabs[t];

                var active = realTab === defaultTab ? "active" : "";

                res += "<div id=\"tab-" + tab.Id + "\" class=\"tab-pane " + active + "\">";
                res += "<div class=\"hpanel\">";
                res += "<div class=\"panel-body panel-body-form\">";

                var rows = tab.Rows;
                for (var r = 0; r < rows.length; r++) {
                    res += this.RenderRow(rows[r]);
                }

                res += "</div>";
                res += "</div>";
                res += "</div>";

                realTab++;
            }
        }

        $("#" + targetId + "Content").html(res);
    }

    this.CalculateRowSpan = function (row) {
        if (HasPropertyValue(row.Fields)) {
            var totalSpan = 0;
            for (var f = 0; f < row.Fields.length; f++) {
                var field = row.Fields[f];
                if (HasPropertyValue(field.ColSpan)) {
                    totalSpan += field.ColSpan - 1;
                }
            }

            return 12 / (row.Fields.length + totalSpan);
        }

        return 1;
    };

    this.RenderRow = function (row) {
        var res = "<div class=\"row\">";

        if (HasPropertyValue(row.Fields)) {
            var fields = row.Fields;

            var span = this.CalculateRowSpan(row);


            for (var f = 0; f < fields.length; f++) {
                var field = fields[f];
                if (field.Type === "Blank") {
                    res += RenderFieldBlank(span);
                    continue;
                }

                res += this.RenderField(field, span);
            }
        }

        if (HasPropertyValue(row.ListId)) {
            var itemName = row.ItemList;
            var itemDefinition = ItemDefinitionByName(itemName);
            var listDefinition = ItemListById(itemDefinition, row.ListId)
            ListSources.push(new PageList({ "ListDefinition": listDefinition, "ItemName": row.ItemList, "ItemDefinition": itemDefinition }));

            var styleHeight = "";
            if (HasPropertyValue(listDefinition.ForcedHeight) === true) {
                styleHeight = " style=\"height:" + listDefinition.ForcedHeight + "px\"";
            }

            res += "<div id=\"" + itemName + "_" + listDefinition.Id + "_List\">";
            res += "  <div class=\"hpanel hblue\" style=\"margin:0;\" id=\"" + itemName + "_" + listDefinition.Id + "_PanelBody\">";
            res += "    <div class=\"panel-heading hbuilt\">";
            res += "      <span id=\"" + itemName + "_" + listDefinition.Id + "_ListTitle\"></span>";
            res += "        <div class=\"panel-tools\">";
            //            <a id="Instancia_Custom_AddBtn"><i class="fa fa-plus"></i>&nbsp;<span id="Instancia_Custom_AddBtnLabel">Afegir instància</span></a>
            res += "          </div>";
            res += "      </div >";
            res += "      <div class=\"tableHead\">";
            res += "        <table class=\"table\">";
            res += "          <thead id=\"" + itemName + "_" + listDefinition.Id + "_ListHead\"></thead>";
            res += "        </table>";
            res += "      </div>";
            res += "      <div class=\"panel-body2 panel-body-list-inForm\" id=\"" + itemName + "_" + listDefinition.Id + "_PanelBodyList\"" + styleHeight + ">";
            res += "        <div class=\"table-responsive\" style=\"max-height: 100%; height: 100%; overflow-y: scroll; overflow-x: hidden\">";
            res += "          <div class=\"table-body\" style=\"max-height: 100%; height: 100%\">";
            res += "            <table class=\"table\" style=\"max-height: 100%\" cellpadding=\"1\" cellspacing=\"1\">";
            res += "              <tbody id=\"" + itemName + "_" + listDefinition.Id + "_ListBody\">";
            res += "              </tbody>";
            res += "            </table>";
            res += "          </div>";
            res += "        </div>";
            res += "      </div>";
            res += "      <div class=\"panel-footer\">";
            res += "        Nº de registros: <strong id=\"" + itemName + "_" + listDefinition.Id + "_ListCount\"></strong>";
            res += "      </div>";
            res += "  </div>";
            res += "</div>";
        }
        
            
        res += "</div>";

        return res;
    }

    this.RenderField = function (fieldForm, span) {
        var res = "";

        if (HasPropertyValue(fieldForm.Type) === true) {
            if (fieldForm.Type.toLowerCase() === "placeholder") {
                res = "<div id=\"Placeholder_" + fieldForm.Name + "\">";
                res += "</div>";
            }
        }
        else {
            var field = FieldByName(this.ItemDefinition, fieldForm.Name)

            if (field !== null) {
                res += this.RenderFieldLabel(field, fieldForm);
                var finalSpan = span;
                if (HasPropertyValue(fieldForm.ColSpan)) {
                    finalSpan = span * fieldForm.ColSpan;
                }

                switch (field.Type.toLowerCase()) {
                    case "datetime":
                        res += RenderFieldDate(field, finalSpan);
                        break;
                    case "long":
                        if (IsFK(this.ItemDefinition, field.Name)) {
                            res += RenderFieldFK(field, finalSpan);
                        }
                        else {
                            res += RenderFieldNumeric(field, finalSpan);
                        }
                        break;
                    case "fixedlist":
                        res += RenderFieldFixedList(field, finalSpan, fieldForm);
                        break;
                    case "textarea":
                        res += RenderFieldTextArea(field, finalSpan, fieldForm);
                        break;
                    case "bool":
                        res += RenderFieldCheckBox(field, finalSpan, fieldForm);
                        break;
                    case "url":
                        res += RenderFieldUrl(field, finalSpan, fieldForm);
                        break;
                    default:
                        res += RenderFieldText(field, finalSpan);
                        break;
                }

            }
        }
        if (res  === "") {
            res += "<div class=\"col-sm-12\">" + fieldForm.Name + " no existe</div>";
        }

        return res;
    }

    this.RenderFieldLabel = function (field, fieldForm) {
        res = "";
        var label = fieldForm.Label;
        var required = fieldForm.Required ? "<span id=\"" + field.Name + "_LabelRequired\" class=\"formFieldRequired\">*</span>" : "";

        if (typeof label === "undefined" || label === null) {
            label = field.Label;
        }

        res += "<label id=\"" + field.Name + "_Label\" class=\"col-sm-1 control-label\">" + label + required + "</label>";
        return res;
    }
}

function RenderFieldUrl(field, span, fieldForm) {
    res = "";
    res += "<div class=\"col-sm-" + (span - 1) + "\">";
    res += "  <div class=\"input-group date\">";
    res += "    <input id=\"" + field.Name + "\" type=\"text\" class=\"form-control\" autocomplete=\"off\">";
    res += "    <span id=\"" + field.Name + "_Btn\" class=\"input-group-addon input-group-button_url\"><i class=\"fa fa-globe\"></i></span>";
    res += "  </div>";
    res += "</div>";
    return res;
}

function RenderFieldText(field, span) {
    res = "";
    res += "<div class=\"col-sm-" + (span - 1) + "\">";
    res += "    <input id=\"" + field.Name + "\" type=\"text\" class=\"form-control\" value=\"" + field.Type + "\" />";
    res += "</div>";
    return res;
}

function RenderFieldCheckBox(field, span) {
    res = "";
    res += "<div class=\"col-sm-" + (span - 1) + "\">";
    res += "    <input type=\"checkbox\" id=\"" + field.Name + "\" class=\"form-control\" />";
    res += "</div>";
    return res;
}

function RenderFieldTextArea(field, span) {
    res = "";
    res += "<div class=\"col-sm-" + (span - 1) + "\">";
    res += "    <textarea id=\"" + field.Name + "\" class=\"form-control\" value=\"" + field.Type + "\" rows=\"3\"></textarea>";
    res += "</div>";
    return res;
}

function RenderFieldNumeric(field, span) {
    res = "";
    res += "<div class=\"col-sm-" + (span - 1) + "\">";
    res += "    <input id=\"" + field.Name + "\" type=\"text\" class=\"form-control\" value=\"" + field.Type + "\" />";
    res += "</div>";
    return res;
}

function RenderFieldFK(field, span) {
    res = "";
    res += "<div class=\"col-sm-" + (span - 1) + "\">";
    res += "    <select id=\"" + field.Name + "\" class=\"form-control\">";
    res += "    </select>";
    res += "</div>";
    return res;
}

function RenderFieldFixedList(field, span, fieldForm) {
    var list = null;
    eval("list = " + field.FixedListName + ";");
    res = "";

    if (fieldForm.FixedListMode === "RadioList") {
        res += "<div class=\"col-sm-" + (span - 1) + "\" style=\"min-height:36px;\">";
        res += "    <input id=\"" + field.Name + "\" type=\"text\" style=\"display:none;\" class=\"form-control\" value=\"" + field.Type + "\" />";


        if (list !== null) {
            for (var x = 0; x < list.length; x++) {
                if (x > 0) {
                    res += "&nbsp;&nbsp;&nbsp;&nbsp;";
                }

                res += "<input type=\"radio\" onclick=\"Layout_FixedListRB_Clicked(this);\" name=\"RB_" + field.Name + "\" id=\"RB_" + field.Name + "_" + x + "\" />";
                res += "&nbsp;" + list[x];
            }
        }
        else {
            res += "Fixedlist " + field.FixedListName;
        }

        res += "</div>";
    }
    else {
        res += "<div class=\"col-sm-" + (span - 1) + "\">";
        res += "<select id=\"" + field.Name + "\" class=\"form-control\">";
        if (list !== null) {
            for (var x = 0; x < list.length; x++) {
                var text = list[x];
                if (x === 0) {
                    text = "Seleccionar";
                }

                res += "<option value=\"" + x + "\">" + text + "</option>";
            }
        }
        res += "</select>";
        res += "</div>";
    }

    return res;
}

function RenderFieldDate(field, span) {
    res = "";
    res += "<div class=\"col-sm-" + (span - 1) + "\">";
    res += "  <div class=\"input-group date\" style=\"width:112px;\">";
    res += "    <input id=\"" + field.Name + "\" type=\"text\" class=\"form-control datepicker\" autocomplete=\"off\" style=\"width:85px;\">";
    res += "    <span id=\"" + field.Name + "_Btn\" class=\"input-group-addon\"><i class=\"fa fa-calendar\"></i></span>";
    res += "  </div>";
    res += "</div>";
    return res;
}

function RenderFieldBlank(span) {
    res = "";
    res += "<div class=\"col-sm-" + (span - 1) + "\">blank</div>";
    return res;
}